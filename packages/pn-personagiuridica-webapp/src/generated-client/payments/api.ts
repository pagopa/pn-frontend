/* tslint:disable */
/* eslint-disable */
/**
 * PN BFF BE Microservice - Pagamenti
 * Documentation APIs v1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pn@pagopa.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Payment minimal information
 * @export
 * @interface BffPaymentInfoItem
 */
export interface BffPaymentInfoItem {
    /**
     * Payment PA fiscal code
     * @type {string}
     * @memberof BffPaymentInfoItem
     */
    'creditorTaxId': string;
    /**
     * Payment notice number  numero avviso
     * @type {string}
     * @memberof BffPaymentInfoItem
     */
    'noticeCode': string;
    /**
     * 
     * @type {PaymentStatus}
     * @memberof BffPaymentInfoItem
     */
    'status': PaymentStatus;
    /**
     * 
     * @type {Detail}
     * @memberof BffPaymentInfoItem
     */
    'detail'?: Detail;
    /**
     * Classification detail to help user address the issue 
     * @type {string}
     * @memberof BffPaymentInfoItem
     */
    'detail_v2'?: string;
    /**
     * error code to show at the user
     * @type {string}
     * @memberof BffPaymentInfoItem
     */
    'errorCode'?: string;
    /**
     * Amount for required payment in euro-cents
     * @type {number}
     * @memberof BffPaymentInfoItem
     */
    'amount'?: number;
    /**
     * reason for payment
     * @type {string}
     * @memberof BffPaymentInfoItem
     */
    'causaleVersamento'?: string;
    /**
     * payment expiration date
     * @type {string}
     * @memberof BffPaymentInfoItem
     */
    'dueDate'?: string;
}


/**
 * 
 * @export
 * @interface BffPaymentRequest
 */
export interface BffPaymentRequest {
    /**
     * 
     * @type {PaymentNotice}
     * @memberof BffPaymentRequest
     */
    'paymentNotice': PaymentNotice;
    /**
     * Checkout base url used to make payment
     * @type {string}
     * @memberof BffPaymentRequest
     */
    'returnUrl': string;
}
/**
 * 
 * @export
 * @interface BffPaymentResponse
 */
export interface BffPaymentResponse {
    /**
     * The Checkout callback URL
     * @type {string}
     * @memberof BffPaymentResponse
     */
    'checkoutUrl': string;
}
/**
 * Classification to help user address the issue   * `PAYMENT_UNAVAILABLE`: Technical Error.   * `PAYMENT_UNKNOWN`: Payment data error.   * `DOMAIN_UNKNOWN`: creditor institution error.   * `PAYMENT_ONGOING`: payment on going.   * `PAYMENT_EXPIRED`: payment expired.   * `PAYMENT_CANCELED`: payment cancelled.   * `PAYMENT_DUPLICATED`: payment duplicated.   * `GENERIC_ERROR`: generic error. 
 * @export
 * @enum {string}
 */

export const Detail = {
    PaymentUnavailable: 'PAYMENT_UNAVAILABLE',
    PaymentUnknown: 'PAYMENT_UNKNOWN',
    DomainUnknown: 'DOMAIN_UNKNOWN',
    PaymentOngoing: 'PAYMENT_ONGOING',
    PaymentExpired: 'PAYMENT_EXPIRED',
    PaymentCanceled: 'PAYMENT_CANCELED',
    PaymentDuplicated: 'PAYMENT_DUPLICATED',
    GenericError: 'GENERIC_ERROR'
} as const;

export type Detail = typeof Detail[keyof typeof Detail];


/**
 * Object containing sender and payment id
 * @export
 * @interface PaymentInfoRequest
 */
export interface PaymentInfoRequest {
    /**
     * Payment PA fiscal code
     * @type {string}
     * @memberof PaymentInfoRequest
     */
    'creditorTaxId': string;
    /**
     * Payment notice number  numero avviso
     * @type {string}
     * @memberof PaymentInfoRequest
     */
    'noticeCode': string;
}
/**
 * Information of a Payment Notice
 * @export
 * @interface PaymentNotice
 */
export interface PaymentNotice {
    /**
     * The payment notice number
     * @type {string}
     * @memberof PaymentNotice
     */
    'noticeNumber': string;
    /**
     * Public Administration tax code
     * @type {string}
     * @memberof PaymentNotice
     */
    'fiscalCode': string;
    /**
     * Amount ( in euro cents ) of the payment notice
     * @type {number}
     * @memberof PaymentNotice
     */
    'amount': number;
    /**
     * Public Administration company name
     * @type {string}
     * @memberof PaymentNotice
     */
    'companyName': string;
    /**
     * Subject of payment
     * @type {string}
     * @memberof PaymentNotice
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface PaymentRequest
 */
export interface PaymentRequest {
    /**
     * 
     * @type {PaymentNotice}
     * @memberof PaymentRequest
     */
    'paymentNotice': PaymentNotice;
    /**
     * Checkout base url used to make payment
     * @type {string}
     * @memberof PaymentRequest
     */
    'returnUrl': string;
}
/**
 * 
 * @export
 * @interface PaymentResponse
 */
export interface PaymentResponse {
    /**
     * The Checkout callback URL
     * @type {string}
     * @memberof PaymentResponse
     */
    'checkoutUrl': string;
}
/**
 * Payment status:   * `REQUIRED` - payment required   * `SUCCEEDED` - payment done   * `IN_PROGRESS` - waiting confirm   * `FAILURE` - error see errorType 
 * @export
 * @enum {string}
 */

export const PaymentStatus = {
    Required: 'REQUIRED',
    Succeeded: 'SUCCEEDED',
    InProgress: 'IN_PROGRESS',
    Failure: 'FAILURE'
} as const;

export type PaymentStatus = typeof PaymentStatus[keyof typeof PaymentStatus];


/**
 * 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * URI reference of type definition
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof Problem
     */
    'status': number;
    /**
     * A short, summary of the problem type. Written in english and readable
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * A human readable explanation of the problem.
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * Internal support identifier associated to error
     * @type {string}
     * @memberof Problem
     */
    'traceId'?: string;
    /**
     * date and time referred to UTC
     * @type {string}
     * @memberof Problem
     */
    'timestamp'?: string;
    /**
     * 
     * @type {Array<ProblemError>}
     * @memberof Problem
     */
    'errors': Array<ProblemError>;
}
/**
 * 
 * @export
 * @interface ProblemError
 */
export interface ProblemError {
    /**
     * Internal code of the error, in human-readable format
     * @type {string}
     * @memberof ProblemError
     */
    'code': string;
    /**
     * Parameter or request body field name for validation error
     * @type {string}
     * @memberof ProblemError
     */
    'element'?: string;
    /**
     * A human readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ProblemError
     */
    'detail'?: string;
}

/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve payment information given a list of payments identifiers
         * @param {Array<PaymentInfoRequest>} [paymentInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsInfoV1: async (paymentInfoRequest?: Array<PaymentInfoRequest>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bff/v1/payments/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentInfoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make a payment by calling the Checkout API
         * @param {BffPaymentRequest} bffPaymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsCartV1: async (bffPaymentRequest: BffPaymentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bffPaymentRequest' is not null or undefined
            assertParamExists('paymentsCartV1', 'bffPaymentRequest', bffPaymentRequest)
            const localVarPath = `/bff/v1/payments/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bffPaymentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve payment information given a list of payments identifiers
         * @param {Array<PaymentInfoRequest>} [paymentInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentsInfoV1(paymentInfoRequest?: Array<PaymentInfoRequest>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BffPaymentInfoItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentsInfoV1(paymentInfoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.getPaymentsInfoV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Make a payment by calling the Checkout API
         * @param {BffPaymentRequest} bffPaymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentsCartV1(bffPaymentRequest: BffPaymentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BffPaymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentsCartV1(bffPaymentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PaymentsApi.paymentsCartV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve payment information given a list of payments identifiers
         * @param {Array<PaymentInfoRequest>} [paymentInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentsInfoV1(paymentInfoRequest?: Array<PaymentInfoRequest>, options?: any): AxiosPromise<Array<BffPaymentInfoItem>> {
            return localVarFp.getPaymentsInfoV1(paymentInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make a payment by calling the Checkout API
         * @param {BffPaymentRequest} bffPaymentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentsCartV1(bffPaymentRequest: BffPaymentRequest, options?: any): AxiosPromise<BffPaymentResponse> {
            return localVarFp.paymentsCartV1(bffPaymentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve payment information given a list of payments identifiers
     * @param {Array<PaymentInfoRequest>} [paymentInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public getPaymentsInfoV1(paymentInfoRequest?: Array<PaymentInfoRequest>, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).getPaymentsInfoV1(paymentInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make a payment by calling the Checkout API
     * @param {BffPaymentRequest} bffPaymentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentsCartV1(bffPaymentRequest: BffPaymentRequest, options?: RawAxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentsCartV1(bffPaymentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



