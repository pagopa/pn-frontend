/* tslint:disable */
/* eslint-disable */
/**
 * PN BFF BE Microservice - Mittenti
 * Documentation APIs v1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pn@pagopa.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AarCreationRequestDetails
 */
export interface AarCreationRequestDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof AarCreationRequestDetails
     */
    'recIndex': number;
    /**
     * Chiave per recupero da safe-storage del documento aar
     * @type {string}
     * @memberof AarCreationRequestDetails
     */
    'aarKey': string;
    /**
     * numero di pagine del PDF generato
     * @type {number}
     * @memberof AarCreationRequestDetails
     */
    'numberOfPages': number;
}
/**
 * 
 * @export
 * @interface AarGenerationDetails
 */
export interface AarGenerationDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof AarGenerationDetails
     */
    'recIndex': number;
    /**
     * Chiave per recupero da safe-storage del documento aar
     * @type {string}
     * @memberof AarGenerationDetails
     */
    'generatedAarUrl': string;
    /**
     * numero di pagine del PDF generato
     * @type {number}
     * @memberof AarGenerationDetails
     */
    'numberOfPages': number;
}
/**
 * 
 * @export
 * @interface AnalogFailureWorkflowDetails
 */
export interface AnalogFailureWorkflowDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof AnalogFailureWorkflowDetails
     */
    'recIndex': number;
    /**
     * Chiave per recupero da safe-storage del documento aar
     * @type {string}
     * @memberof AnalogFailureWorkflowDetails
     */
    'generatedAarUrl'?: string;
}
/**
 * 
 * @export
 * @interface AnalogSuccessWorkflowDetails
 */
export interface AnalogSuccessWorkflowDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof AnalogSuccessWorkflowDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof AnalogSuccessWorkflowDetails
     */
    'physicalAddress': PhysicalAddress;
}
/**
 * 
 * @export
 * @interface AttachmentDetails
 */
export interface AttachmentDetails {
    /**
     * 
     * @type {string}
     * @memberof AttachmentDetails
     */
    'id'?: string;
    /**
     * Codici documentType: - Plico: Indica il plico cartaceo - AR: Indica la ricevuta di ritorno - Indagine: Indica la ricevuta dell\'analisi dell\'indagine - 23L: Indica la ricevuta 23L 
     * @type {string}
     * @memberof AttachmentDetails
     */
    'documentType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentDetails
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentDetails
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface BaseAnalogDetails
 */
export interface BaseAnalogDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof BaseAnalogDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof BaseAnalogDetails
     */
    'physicalAddress': PhysicalAddress;
    /**
     * 
     * @type {ServiceLevel}
     * @memberof BaseAnalogDetails
     */
    'serviceLevel': ServiceLevel;
    /**
     * numero dei tentativi effettuati
     * @type {number}
     * @memberof BaseAnalogDetails
     */
    'sentAttemptMade': number;
    /**
     * Id relativo alla eventuale precedente richiesta di invio cartaceo
     * @type {string}
     * @memberof BaseAnalogDetails
     */
    'relatedRequestId'?: string;
}


/**
 * 
 * @export
 * @interface BaseRegisteredLetterDetails
 */
export interface BaseRegisteredLetterDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof BaseRegisteredLetterDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof BaseRegisteredLetterDetails
     */
    'physicalAddress': PhysicalAddress;
}
/**
 * Dettaglio notifica con elementi per il Frontend
 * @export
 * @interface BffFullNotificationV1
 */
export interface BffFullNotificationV1 {
    /**
     * Identificativo utilizzabile dal chiamante per disambiguare differenti  \"richieste di notificazione\" effettuate con lo stesso numero di protocollo  (campo _paProtocolNumber_). Questo può essere necessario in caso di  \"richiesta di notifica\" rifiutata per errori nei codici di verifica degli allegati.
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'idempotenceToken'?: string;
    /**
     * Numero di protocollo che la PA mittente assegna alla notifica stessa
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'paProtocolNumber': string;
    /**
     * titolo della notifica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'subject': string;
    /**
     * descrizione sintetica della notifica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'abstract'?: string;
    /**
     * Informazioni sui destinatari
     * @type {Array<NotificationRecipientV23>}
     * @memberof BffFullNotificationV1
     */
    'recipients': Array<NotificationRecipientV23>;
    /**
     * Documenti notificati
     * @type {Array<NotificationDocument>}
     * @memberof BffFullNotificationV1
     */
    'documents': Array<NotificationDocument>;
    /**
     * 
     * @type {NotificationFeePolicy}
     * @memberof BffFullNotificationV1
     */
    'notificationFeePolicy': NotificationFeePolicy;
    /**
     * Identificativo Univoco Notifica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'cancelledIun'?: string;
    /**
     * Tipologia comunicazione fisica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'physicalCommunicationType': BffFullNotificationV1PhysicalCommunicationTypeEnum;
    /**
     * Denominazione ente o persona fisica / ragione sociale
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'senderDenomination': string;
    /**
     * Payment PA fiscal code
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'senderTaxId': string;
    /**
     * Gruppo di utenti dell\'ente mittente che può visualizzare la notifica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'group'?: string;
    /**
     * Importo della notifica in eurocent
     * @type {number}
     * @memberof BffFullNotificationV1
     */
    'amount'?: number;
    /**
     * Data di scadenza del pagamento nel formato YYYY-MM-DD riferito all\'Italia
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'paymentExpirationDate'?: string;
    /**
     * Codice tassonomico della notifica basato sulla definizione presente nell\'allegato 2 capitolo C del bando [__AVVISO PUBBLICO MISURA 1.4.5 PIATTAFORMA NOTIFICHE DIGITALI__](https://pnrrcomuni.fondazioneifel.it/bandi_public/Bando/325)
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'taxonomyCode': string;
    /**
     * Costo espresso in eurocent che la PA imputa per la notifica. <br/> Obbligatoria per notifiche con notificationFeePolicy=DELIVERY_MODE<br/> Il default nei casi di non obbligatorietà è 100 <br/> Esempio paFee ad 1€ -> 100 <br/>
     * @type {number}
     * @memberof BffFullNotificationV1
     */
    'paFee'?: number;
    /**
     * IVA espressa in percentuale imposta al mittente sulla notifica analogica. <br/> Obbligatoria per notifiche con notificationFeePolicy=DELIVERY_MODE. <br/> Il default nei casi di non obbligatorietà è 22 <br/> Esempio vat al 22% -> 22 <br/>
     * @type {number}
     * @memberof BffFullNotificationV1
     */
    'vat'?: number;
    /**
     * Modalitá di integrazione pagoPA per l\'attualizazione del costo della notifica. <br/> - _NONE_: nessuna attualizzazione. <br/> - _SYNC_: modalitá sincrona. <br/> - _ASYNC_: modalitá asincrona. (non ancora supportata)<br/>
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'pagoPaIntMode'?: BffFullNotificationV1PagoPaIntModeEnum;
    /**
     * Identificativo (non IPA) della PA mittente che ha eseguito l\'onboarding su SelfCare.
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'senderPaId'?: string;
    /**
     * Identificativo Univoco Notifica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'iun': string;
    /**
     * Momento di ricezione della notifica da parte di PN
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'sentAt': string;
    /**
     * Identificativo Univoco Notifica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'cancelledByIun'?: string;
    /**
     * Indica se i documenti notificati sono ancora disponibili.
     * @type {boolean}
     * @memberof BffFullNotificationV1
     */
    'documentsAvailable'?: boolean;
    /**
     * Indica la versione della notifica
     * @type {string}
     * @memberof BffFullNotificationV1
     */
    'version'?: string;
    /**
     * 
     * @type {Array<NotificationStatusHistory>}
     * @memberof BffFullNotificationV1
     */
    'notificationStatusHistory': Array<NotificationStatusHistory>;
    /**
     * 
     * @type {NotificationStatus}
     * @memberof BffFullNotificationV1
     */
    'notificationStatus': NotificationStatus;
    /**
     * 
     * @type {Array<NotificationDetailTimeline>}
     * @memberof BffFullNotificationV1
     */
    'timeline': Array<NotificationDetailTimeline>;
    /**
     * 
     * @type {NotificationDetailTimeline}
     * @memberof BffFullNotificationV1
     */
    'radd'?: NotificationDetailTimeline;
    /**
     * 
     * @type {Array<NotificationDetailDocument>}
     * @memberof BffFullNotificationV1
     */
    'otherDocuments'?: Array<NotificationDetailDocument>;
}

export const BffFullNotificationV1PhysicalCommunicationTypeEnum = {
    ArRegisteredLetter: 'AR_REGISTERED_LETTER',
    RegisteredLetter890: 'REGISTERED_LETTER_890'
} as const;

export type BffFullNotificationV1PhysicalCommunicationTypeEnum = typeof BffFullNotificationV1PhysicalCommunicationTypeEnum[keyof typeof BffFullNotificationV1PhysicalCommunicationTypeEnum];
export const BffFullNotificationV1PagoPaIntModeEnum = {
    None: 'NONE',
    Sync: 'SYNC',
    Async: 'ASYNC'
} as const;

export type BffFullNotificationV1PagoPaIntModeEnum = typeof BffFullNotificationV1PagoPaIntModeEnum[keyof typeof BffFullNotificationV1PagoPaIntModeEnum];

/**
 * 
 * @export
 * @interface CompletelyUnreachableCreationRequestDetails
 */
export interface CompletelyUnreachableCreationRequestDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof CompletelyUnreachableCreationRequestDetails
     */
    'recIndex': number;
    /**
     * Identificativo dell\'atto opponibile a terzi del quale è stata richiesta la creazione
     * @type {string}
     * @memberof CompletelyUnreachableCreationRequestDetails
     */
    'legalfactId'?: string;
    /**
     * 
     * @type {EndWorkflowStatus}
     * @memberof CompletelyUnreachableCreationRequestDetails
     */
    'endWorkflowStatus'?: EndWorkflowStatus;
    /**
     * Data chiusura workflow
     * @type {string}
     * @memberof CompletelyUnreachableCreationRequestDetails
     */
    'completionWorkflowDate'?: string;
}


/**
 * 
 * @export
 * @interface CompletelyUnreachableDetails
 */
export interface CompletelyUnreachableDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof CompletelyUnreachableDetails
     */
    'recIndex': number;
    /**
     * Data generazione atto opponibile a terzi allegato
     * @type {string}
     * @memberof CompletelyUnreachableDetails
     */
    'legalFactGenerationDate'?: string;
}
/**
 * Fase in cui è avvenuta la richiesta
 * @export
 * @enum {string}
 */

export const ContactPhase = {
    ChooseDelivery: 'CHOOSE_DELIVERY',
    SendAttempt: 'SEND_ATTEMPT'
} as const;

export type ContactPhase = typeof ContactPhase[keyof typeof ContactPhase];


/**
 * 
 * @export
 * @interface DelegateInfo
 */
export interface DelegateInfo {
    /**
     * 
     * @type {string}
     * @memberof DelegateInfo
     */
    'internalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DelegateInfo
     */
    'taxId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DelegateInfo
     */
    'operatorUuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof DelegateInfo
     */
    'mandateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DelegateInfo
     */
    'denomination'?: string;
    /**
     * 
     * @type {RecipientType}
     * @memberof DelegateInfo
     */
    'delegateType'?: RecipientType;
}


/**
 * Tipologia Domiciliazione
 * @export
 * @enum {string}
 */

export const DeliveryMode = {
    Digital: 'DIGITAL',
    Analog: 'ANALOG'
} as const;

export type DeliveryMode = typeof DeliveryMode[keyof typeof DeliveryMode];


/**
 * Indirizzo di invio della notifica
 * @export
 * @interface DigitalAddress
 */
export interface DigitalAddress {
    /**
     * tipo di indirizzo PEC, REM, SERCQ, SMS, EMAIL, APPIO ...
     * @type {string}
     * @memberof DigitalAddress
     */
    'type': string;
    /**
     * account@domain
     * @type {string}
     * @memberof DigitalAddress
     */
    'address': string;
}
/**
 * sorgente indirizzo di invio della notifica
 * @export
 * @enum {string}
 */

export const DigitalAddressSource = {
    Platform: 'PLATFORM',
    Special: 'SPECIAL',
    General: 'GENERAL'
} as const;

export type DigitalAddressSource = typeof DigitalAddressSource[keyof typeof DigitalAddressSource];


/**
 * 
 * @export
 * @interface DigitalDeliveryCreationRequestDetails
 */
export interface DigitalDeliveryCreationRequestDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof DigitalDeliveryCreationRequestDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof DigitalDeliveryCreationRequestDetails
     */
    'digitalAddress': DigitalAddress;
    /**
     * 
     * @type {EndWorkflowStatus}
     * @memberof DigitalDeliveryCreationRequestDetails
     */
    'endWorkflowStatus'?: EndWorkflowStatus;
    /**
     * Data chiusura workflow
     * @type {string}
     * @memberof DigitalDeliveryCreationRequestDetails
     */
    'completionWorkflowDate'?: string;
    /**
     * Identificativo dell\'atto opponibile a terzi del quale è stata richiesta la creazione
     * @type {string}
     * @memberof DigitalDeliveryCreationRequestDetails
     */
    'legalfactId'?: string;
}


/**
 * 
 * @export
 * @interface DigitalFailureWorkflowDetails
 */
export interface DigitalFailureWorkflowDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof DigitalFailureWorkflowDetails
     */
    'recIndex': number;
}
/**
 * 
 * @export
 * @interface DigitalSuccessWorkflowDetails
 */
export interface DigitalSuccessWorkflowDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof DigitalSuccessWorkflowDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof DigitalSuccessWorkflowDetails
     */
    'digitalAddress': DigitalAddress;
}
/**
 * Stato chiusura workflow
 * @export
 * @enum {string}
 */

export const EndWorkflowStatus = {
    Success: 'SUCCESS',
    Failure: 'FAILURE'
} as const;

export type EndWorkflowStatus = typeof EndWorkflowStatus[keyof typeof EndWorkflowStatus];


/**
 * Informazioni utili per effettuare il pagamento di una notifica, sono associate al destinatario perché le spese di notifica possono differire a seconda del canale di notifica utilizzato. <br/>   - _title_: titolo del documento pdf da mostrare all\'utente .<br/>   - _applyCost_: flag per indicare se il modello F24 deve contenere i costi di notifica.<br/>   - _metadataAttachment_: riferimento ai metadati per la generazione del modello F24.<br/>
 * @export
 * @interface F24Payment
 */
export interface F24Payment {
    /**
     * Titolo del documento pdf da mostrare all\'utente
     * @type {string}
     * @memberof F24Payment
     */
    'title': string;
    /**
     * Flag per indicare se il modello F24 deve contere i costi di notifica
     * @type {boolean}
     * @memberof F24Payment
     */
    'applyCost': boolean;
    /**
     * 
     * @type {NotificationMetadataAttachment}
     * @memberof F24Payment
     */
    'metadataAttachment': NotificationMetadataAttachment;
}
/**
 * 
 * @export
 * @interface GetAddressInfoDetails
 */
export interface GetAddressInfoDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof GetAddressInfoDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddressSource}
     * @memberof GetAddressInfoDetails
     */
    'digitalAddressSource': DigitalAddressSource;
    /**
     * Disponibilità indirizzo
     * @type {boolean}
     * @memberof GetAddressInfoDetails
     */
    'isAvailable': boolean;
    /**
     * Data tentativo
     * @type {string}
     * @memberof GetAddressInfoDetails
     */
    'attemptDate': string;
}


/**
 * Risultato invio messaggio su IO
 * @export
 * @enum {string}
 */

export const IoSendMessageResult = {
    NotSentOptinAlreadySent: 'NOT_SENT_OPTIN_ALREADY_SENT',
    SentCourtesy: 'SENT_COURTESY',
    SentOptin: 'SENT_OPTIN'
} as const;

export type IoSendMessageResult = typeof IoSendMessageResult[keyof typeof IoSendMessageResult];


/**
 * 
 * @export
 * @interface LegalFactId
 */
export interface LegalFactId {
    /**
     * 
     * @type {string}
     * @memberof LegalFactId
     */
    'key': string;
    /**
     * 
     * @type {LegalFactType}
     * @memberof LegalFactId
     */
    'category': LegalFactType;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const LegalFactType = {
    Aar: 'AAR',
    SenderAck: 'SENDER_ACK',
    DigitalDelivery: 'DIGITAL_DELIVERY',
    AnalogDelivery: 'ANALOG_DELIVERY',
    RecipientAccess: 'RECIPIENT_ACCESS',
    PecReceipt: 'PEC_RECEIPT',
    AnalogFailureDelivery: 'ANALOG_FAILURE_DELIVERY'
} as const;

export type LegalFactType = typeof LegalFactType[keyof typeof LegalFactType];


/**
 * I campi utilizzati per la creazione di una nuova Notifica.
 * @export
 * @interface NewNotificationRequestV23
 */
export interface NewNotificationRequestV23 {
    /**
     * Identificativo utilizzabile dal chiamante per disambiguare differenti  \"richieste di notificazione\" effettuate con lo stesso numero di protocollo  (campo _paProtocolNumber_). Questo può essere necessario in caso di  \"richiesta di notifica\" rifiutata per errori nei codici di verifica degli allegati.
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'idempotenceToken'?: string;
    /**
     * Numero di protocollo che la PA mittente assegna alla notifica stessa
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'paProtocolNumber': string;
    /**
     * titolo della notifica
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'subject': string;
    /**
     * descrizione sintetica della notifica
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'abstract'?: string;
    /**
     * Informazioni sui destinatari
     * @type {Array<NotificationRecipientV23>}
     * @memberof NewNotificationRequestV23
     */
    'recipients': Array<NotificationRecipientV23>;
    /**
     * Documenti notificati
     * @type {Array<NotificationDocument>}
     * @memberof NewNotificationRequestV23
     */
    'documents': Array<NotificationDocument>;
    /**
     * 
     * @type {NotificationFeePolicy}
     * @memberof NewNotificationRequestV23
     */
    'notificationFeePolicy': NotificationFeePolicy;
    /**
     * Identificativo Univoco Notifica
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'cancelledIun'?: string;
    /**
     * Tipologia comunicazione fisica
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'physicalCommunicationType': NewNotificationRequestV23PhysicalCommunicationTypeEnum;
    /**
     * Denominazione ente o persona fisica / ragione sociale
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'senderDenomination': string;
    /**
     * Payment PA fiscal code
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'senderTaxId': string;
    /**
     * Gruppo di utenti dell\'ente mittente che può visualizzare la notifica
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'group'?: string;
    /**
     * Importo della notifica in eurocent
     * @type {number}
     * @memberof NewNotificationRequestV23
     */
    'amount'?: number;
    /**
     * Data di scadenza del pagamento nel formato YYYY-MM-DD riferito all\'Italia
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'paymentExpirationDate'?: string;
    /**
     * Codice tassonomico della notifica basato sulla definizione presente nell\'allegato 2 capitolo C del bando [__AVVISO PUBBLICO MISURA 1.4.5 PIATTAFORMA NOTIFICHE DIGITALI__](https://pnrrcomuni.fondazioneifel.it/bandi_public/Bando/325)
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'taxonomyCode': string;
    /**
     * Costo espresso in eurocent che la PA imputa per la notifica. <br/> Obbligatoria per notifiche con notificationFeePolicy=DELIVERY_MODE<br/> Il default nei casi di non obbligatorietà è 100 <br/> Esempio paFee ad 1€ -> 100 <br/>
     * @type {number}
     * @memberof NewNotificationRequestV23
     */
    'paFee'?: number;
    /**
     * IVA espressa in percentuale imposta al mittente sulla notifica analogica. <br/> Obbligatoria per notifiche con notificationFeePolicy=DELIVERY_MODE. <br/> Il default nei casi di non obbligatorietà è 22 <br/> Esempio vat al 22% -> 22 <br/>
     * @type {number}
     * @memberof NewNotificationRequestV23
     */
    'vat'?: number;
    /**
     * Modalitá di integrazione pagoPA per l\'attualizazione del costo della notifica. <br/> - _NONE_: nessuna attualizzazione. <br/> - _SYNC_: modalitá sincrona. <br/> - _ASYNC_: modalitá asincrona. (non ancora supportata)<br/>
     * @type {string}
     * @memberof NewNotificationRequestV23
     */
    'pagoPaIntMode'?: NewNotificationRequestV23PagoPaIntModeEnum;
}

export const NewNotificationRequestV23PhysicalCommunicationTypeEnum = {
    ArRegisteredLetter: 'AR_REGISTERED_LETTER',
    RegisteredLetter890: 'REGISTERED_LETTER_890'
} as const;

export type NewNotificationRequestV23PhysicalCommunicationTypeEnum = typeof NewNotificationRequestV23PhysicalCommunicationTypeEnum[keyof typeof NewNotificationRequestV23PhysicalCommunicationTypeEnum];
export const NewNotificationRequestV23PagoPaIntModeEnum = {
    None: 'NONE',
    Sync: 'SYNC',
    Async: 'ASYNC'
} as const;

export type NewNotificationRequestV23PagoPaIntModeEnum = typeof NewNotificationRequestV23PagoPaIntModeEnum[keyof typeof NewNotificationRequestV23PagoPaIntModeEnum];

/**
 * 
 * @export
 * @interface NormalizedAddressDetails
 */
export interface NormalizedAddressDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof NormalizedAddressDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof NormalizedAddressDetails
     */
    'oldAddress': PhysicalAddress;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof NormalizedAddressDetails
     */
    'normalizedAddress': PhysicalAddress;
}
/**
 * 
 * @export
 * @interface NotHandledDetails
 */
export interface NotHandledDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof NotHandledDetails
     */
    'recIndex': number;
    /**
     * Codice motivazione casistica non gestita
     * @type {string}
     * @memberof NotHandledDetails
     */
    'reasonCode': string;
    /**
     * Motivazione casistica non gestita
     * @type {string}
     * @memberof NotHandledDetails
     */
    'reason': string;
}
/**
 * Un allegato della notifica.
 * @export
 * @interface NotificationAttachment
 */
export interface NotificationAttachment {
    /**
     * 
     * @type {NotificationAttachmentDigests}
     * @memberof NotificationAttachment
     */
    'digests': NotificationAttachmentDigests;
    /**
     * tipo di contenuto dell\'allegato, supportato application/pdf
     * @type {string}
     * @memberof NotificationAttachment
     */
    'contentType': string;
    /**
     * 
     * @type {NotificationAttachmentBodyRef}
     * @memberof NotificationAttachment
     */
    'ref': NotificationAttachmentBodyRef;
}
/**
 * Riferimento all\'allegato precaricato
 * @export
 * @interface NotificationAttachmentBodyRef
 */
export interface NotificationAttachmentBodyRef {
    /**
     * Chiave in cui è stato salvato l\'allegato
     * @type {string}
     * @memberof NotificationAttachmentBodyRef
     */
    'key': string;
    /**
     * Token per recuperare l\'esatta istanza dell\'allegato, che dovrà coincidere con l\'__x-amz-version-id__ ottenuto nell\'header della response in fase di upload del documento ad esso associato.
     * @type {string}
     * @memberof NotificationAttachmentBodyRef
     */
    'versionToken': string;
}
/**
 * Codici per la verifica del corretto caricamento di un allegato
 * @export
 * @interface NotificationAttachmentDigests
 */
export interface NotificationAttachmentDigests {
    /**
     * Digest \"sha256\" della codifica binaria dell\'allegato in base64
     * @type {string}
     * @memberof NotificationAttachmentDigests
     */
    'sha256': string;
}
/**
 * 
 * @export
 * @interface NotificationCancellationRequestDetails
 */
export interface NotificationCancellationRequestDetails {
    /**
     * Id della richiesta
     * @type {string}
     * @memberof NotificationCancellationRequestDetails
     */
    'cancellationRequestId': string;
}
/**
 * 
 * @export
 * @interface NotificationCancelledDetails
 */
export interface NotificationCancelledDetails {
    /**
     * costo notifica in euro cents, vale 100 * numero di recipient not refined
     * @type {number}
     * @memberof NotificationCancelledDetails
     */
    'notificationCost': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof NotificationCancelledDetails
     */
    'notRefinedRecipientIndexes': Array<number>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NotificationDeliveryMode = {
    Analog: 'analog',
    Digital: 'digital'
} as const;

export type NotificationDeliveryMode = typeof NotificationDeliveryMode[keyof typeof NotificationDeliveryMode];


/**
 * Documento della notifica.
 * @export
 * @interface NotificationDetailDocument
 */
export interface NotificationDetailDocument {
    /**
     * 
     * @type {NotificationAttachmentDigests}
     * @memberof NotificationDetailDocument
     */
    'digests': NotificationAttachmentDigests;
    /**
     * tipo di contenuto dell\'allegato, supportato application/pdf
     * @type {string}
     * @memberof NotificationDetailDocument
     */
    'contentType': string;
    /**
     * 
     * @type {NotificationAttachmentBodyRef}
     * @memberof NotificationDetailDocument
     */
    'ref': NotificationAttachmentBodyRef;
    /**
     * 
     * @type {string}
     * @memberof NotificationDetailDocument
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDetailDocument
     */
    'requiresAck'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDetailDocument
     */
    'docIdx'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDetailDocument
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDetailDocument
     */
    'documentType'?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationDetailDocument
     */
    'recIndex'?: number;
}
/**
 * 
 * @export
 * @interface NotificationDetailTimeline
 */
export interface NotificationDetailTimeline {
    /**
     * 
     * @type {string}
     * @memberof NotificationDetailTimeline
     */
    'elementId': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationDetailTimeline
     */
    'timestamp': string;
    /**
     * 
     * @type {Array<LegalFactId>}
     * @memberof NotificationDetailTimeline
     */
    'legalFactsIds'?: Array<LegalFactId>;
    /**
     * 
     * @type {TimelineCategory}
     * @memberof NotificationDetailTimeline
     */
    'category': TimelineCategory;
    /**
     * 
     * @type {NotificationDetailTimelineDetails}
     * @memberof NotificationDetailTimeline
     */
    'details': NotificationDetailTimelineDetails;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationDetailTimeline
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof NotificationDetailTimeline
     */
    'index'?: number;
}


/**
 * @type NotificationDetailTimelineDetails
 * The raw event payload that will be different based on the event.
 * @export
 */
export type NotificationDetailTimelineDetails = AarCreationRequestDetails | AarGenerationDetails | AnalogFailureWorkflowDetails | AnalogSuccessWorkflowDetails | BaseAnalogDetails | BaseRegisteredLetterDetails | CompletelyUnreachableCreationRequestDetails | CompletelyUnreachableDetails | DigitalDeliveryCreationRequestDetails | DigitalFailureWorkflowDetails | DigitalSuccessWorkflowDetails | GetAddressInfoDetails | NormalizedAddressDetails | NotHandledDetails | NotificationCancellationRequestDetails | NotificationCancelledDetails | NotificationPaidDetailsV23 | NotificationRADDRetrievedDetails | NotificationRequestAcceptedDetails | NotificationViewedCreationRequestDetailsV23 | NotificationViewedDetailsV23 | PrepareAnalogDomicileFailureDetails | PrepareDigitalDetails | ProbableDateAnalogWorkflowDetails | PublicRegistryCallDetails | PublicRegistryResponseDetails | RefinementDetailsV23 | RequestRefusedDetailsV23 | ScheduleAnalogWorkflowDetailsV23 | ScheduleDigitalWorkflowDetailsV23 | ScheduleRefinementDetails | SendAnalogDetails | SendAnalogFeedbackDetails | SendAnalogProgressDetailsV23 | SendCourtesyMessageDetails | SendDigitalDetails | SendDigitalFeedbackDetails | SendDigitalProgressDetailsV23 | SenderAckCreationRequestDetails | SimpleRegisteredLetterDetails | SimpleRegisteredLetterProgressDetails;

/**
 * Indirizzo di invio della notifica
 * @export
 * @interface NotificationDigitalAddress
 */
export interface NotificationDigitalAddress {
    /**
     * tipo di indirizzo PEC, REM, SERCQ, ...
     * @type {string}
     * @memberof NotificationDigitalAddress
     */
    'type': NotificationDigitalAddressTypeEnum;
    /**
     * Indirizzo PEC o REM che il mittente della notifica intende utilizzare per  raggiungere il destinatario.
     * @type {string}
     * @memberof NotificationDigitalAddress
     */
    'address': string;
}

export const NotificationDigitalAddressTypeEnum = {
    Pec: 'PEC'
} as const;

export type NotificationDigitalAddressTypeEnum = typeof NotificationDigitalAddressTypeEnum[keyof typeof NotificationDigitalAddressTypeEnum];

/**
 * Un documento da notificare
 * @export
 * @interface NotificationDocument
 */
export interface NotificationDocument {
    /**
     * 
     * @type {NotificationAttachmentDigests}
     * @memberof NotificationDocument
     */
    'digests': NotificationAttachmentDigests;
    /**
     * tipo di contenuto dell\'allegato, supportato application/pdf
     * @type {string}
     * @memberof NotificationDocument
     */
    'contentType': string;
    /**
     * 
     * @type {NotificationAttachmentBodyRef}
     * @memberof NotificationDocument
     */
    'ref': NotificationAttachmentBodyRef;
    /**
     * Titolo del documento allegato. Stringa alfanumerica con caratteri utilizzabili in un nome file.
     * @type {string}
     * @memberof NotificationDocument
     */
    'title'?: string;
    /**
     * Indice del documento partendo da 0.
     * @type {string}
     * @memberof NotificationDocument
     */
    'docIdx'?: string;
}
/**
 * Politica di addebitamento dei costi di notifica. <br/> - _FLAT_RATE_: costo forfettario fisso. <br/> - _DELIVERY_MODE_: costo calcolato in base all\'effettivo percorso di notifica. <br/>
 * @export
 * @enum {string}
 */

export const NotificationFeePolicy = {
    FlatRate: 'FLAT_RATE',
    DeliveryMode: 'DELIVERY_MODE'
} as const;

export type NotificationFeePolicy = typeof NotificationFeePolicy[keyof typeof NotificationFeePolicy];


/**
 * Un metadato allegato della notifica.
 * @export
 * @interface NotificationMetadataAttachment
 */
export interface NotificationMetadataAttachment {
    /**
     * 
     * @type {NotificationAttachmentDigests}
     * @memberof NotificationMetadataAttachment
     */
    'digests': NotificationAttachmentDigests;
    /**
     * tipo di contenuto dell\'allegato, supportato application/json
     * @type {string}
     * @memberof NotificationMetadataAttachment
     */
    'contentType': string;
    /**
     * 
     * @type {NotificationAttachmentBodyRef}
     * @memberof NotificationMetadataAttachment
     */
    'ref': NotificationAttachmentBodyRef;
}
/**
 * 
 * @export
 * @interface NotificationPaidDetailsV23
 */
export interface NotificationPaidDetailsV23 {
    /**
     * Index destinatario che ha effettuato il pagamento della notifica
     * @type {number}
     * @memberof NotificationPaidDetailsV23
     */
    'recIndex': number;
    /**
     * 
     * @type {RecipientType}
     * @memberof NotificationPaidDetailsV23
     */
    'recipientType': RecipientType;
    /**
     * Importo di pagamento in eurocent
     * @type {number}
     * @memberof NotificationPaidDetailsV23
     */
    'amount'?: number;
    /**
     * Payment PA fiscal code
     * @type {string}
     * @memberof NotificationPaidDetailsV23
     */
    'creditorTaxId'?: string;
    /**
     * Payment notice number  numero avviso
     * @type {string}
     * @memberof NotificationPaidDetailsV23
     */
    'noticeCode'?: string;
    /**
     * un UUID che identifica un pagamento f24
     * @type {string}
     * @memberof NotificationPaidDetailsV23
     */
    'idF24'?: string;
    /**
     * Canale sorgente della richiesta di pagamento
     * @type {string}
     * @memberof NotificationPaidDetailsV23
     */
    'paymentSourceChannel': string;
    /**
     * Indica se la data di pagamento é certa
     * @type {boolean}
     * @memberof NotificationPaidDetailsV23
     * @deprecated
     */
    'uncertainPaymentDate'?: boolean;
    /**
     * Data evento pagamento
     * @type {string}
     * @memberof NotificationPaidDetailsV23
     */
    'eventTimestamp'?: string;
}


/**
 * Un modulo di pagamento allegato alla notifica
 * @export
 * @interface NotificationPaymentAttachment
 */
export interface NotificationPaymentAttachment {
    /**
     * 
     * @type {NotificationAttachmentDigests}
     * @memberof NotificationPaymentAttachment
     */
    'digests': NotificationAttachmentDigests;
    /**
     * tipo di contenuto dell\'allegato, supportato application/pdf
     * @type {string}
     * @memberof NotificationPaymentAttachment
     */
    'contentType': string;
    /**
     * 
     * @type {NotificationAttachmentBodyRef}
     * @memberof NotificationPaymentAttachment
     */
    'ref': NotificationAttachmentBodyRef;
}
/**
 * 
 * @export
 * @interface NotificationPaymentItem
 */
export interface NotificationPaymentItem {
    /**
     * 
     * @type {PagoPaPayment}
     * @memberof NotificationPaymentItem
     */
    'pagoPa'?: PagoPaPayment;
    /**
     * 
     * @type {F24Payment}
     * @memberof NotificationPaymentItem
     */
    'f24'?: F24Payment;
}
/**
 * Indirizzo fisico
 * @export
 * @interface NotificationPhysicalAddress
 */
export interface NotificationPhysicalAddress {
    /**
     * Campo \"presso\" dell\'indirizzo
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'at'?: string;
    /**
     * Indirizzo del domicilio fisico
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'address': string;
    /**
     * Seconda riga dell\'indirizzo fisico
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'addressDetails'?: string;
    /**
     * Codice di avviamento postale. In caso di invio estero diventa facoltativo
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'zip'?: string;
    /**
     * Comune
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'municipality': string;
    /**
     * Frazione o località
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'municipalityDetails'?: string;
    /**
     * Provincia
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'province'?: string;
    /**
     * Denominazione paese estero
     * @type {string}
     * @memberof NotificationPhysicalAddress
     */
    'foreignState'?: string;
}
/**
 * 
 * @export
 * @interface NotificationRADDRetrievedDetails
 */
export interface NotificationRADDRetrievedDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof NotificationRADDRetrievedDetails
     */
    'recIndex': number;
    /**
     * tipo di Rete Anti Digital Divide <br/> __FSU__: Fornitore Servizio Universale <br/> __ALT__: Fornitore RADD Alternativa <br/> 
     * @type {string}
     * @memberof NotificationRADDRetrievedDetails
     */
    'raddType': string;
    /**
     * Identificativo della pratica all\'interno della rete RADD
     * @type {string}
     * @memberof NotificationRADDRetrievedDetails
     */
    'raddTransactionId': string;
    /**
     * Data evento
     * @type {string}
     * @memberof NotificationRADDRetrievedDetails
     */
    'eventTimestamp': string;
}
/**
 * Informazioni sui destinatari
 * @export
 * @interface NotificationRecipientV23
 */
export interface NotificationRecipientV23 {
    /**
     * Tipologia di destinatario: Persona Fisica (PF) o Persona Giuridica (PG)
     * @type {string}
     * @memberof NotificationRecipientV23
     */
    'recipientType': NotificationRecipientV23RecipientTypeEnum;
    /**
     * C.F. persona fisica o persona giuridica
     * @type {string}
     * @memberof NotificationRecipientV23
     */
    'taxId': string;
    /**
     * id interno anonimizzato
     * @type {string}
     * @memberof NotificationRecipientV23
     */
    'internalId'?: string;
    /**
     * Denominazione ente o persona fisica / ragione sociale
     * @type {string}
     * @memberof NotificationRecipientV23
     */
    'denomination': string;
    /**
     * 
     * @type {NotificationDigitalAddress}
     * @memberof NotificationRecipientV23
     */
    'digitalDomicile'?: NotificationDigitalAddress;
    /**
     * 
     * @type {NotificationPhysicalAddress}
     * @memberof NotificationRecipientV23
     */
    'physicalAddress': NotificationPhysicalAddress;
    /**
     * Lista dei pagamenti collegati alla notifica per il destinatario. Possono essere pagamenti rateali o alternativi
     * @type {Array<NotificationPaymentItem>}
     * @memberof NotificationRecipientV23
     */
    'payments'?: Array<NotificationPaymentItem>;
}

export const NotificationRecipientV23RecipientTypeEnum = {
    Pf: 'PF',
    Pg: 'PG'
} as const;

export type NotificationRecipientV23RecipientTypeEnum = typeof NotificationRecipientV23RecipientTypeEnum[keyof typeof NotificationRecipientV23RecipientTypeEnum];

/**
 * 
 * @export
 * @interface NotificationRefusedErrorV23
 */
export interface NotificationRefusedErrorV23 {
    /**
     * Errori di rifiuto della notifica.   - FILE_NOTFOUND   - FILE_SHA_ERROR   - TAXID_NOT_VALID   - SERVICE_UNAVAILABLE   - FILE_PDF_INVALID_ERROR   - FILE_PDF_TOOBIG_ERROR   - NOT_VALID_ADDRESS   - RECIPIENT_ID_NOT_VALID   - F24_METADATA_NOT_VALID   - PAYMENT_NOT_VALID   ...
     * @type {string}
     * @memberof NotificationRefusedErrorV23
     */
    'errorCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRefusedErrorV23
     */
    'detail'?: string;
}
/**
 * 
 * @export
 * @interface NotificationRequestAcceptedDetails
 */
export interface NotificationRequestAcceptedDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof NotificationRequestAcceptedDetails
     */
    'recIndex'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NotificationStatus = {
    InValidation: 'IN_VALIDATION',
    Accepted: 'ACCEPTED',
    Delivering: 'DELIVERING',
    Delivered: 'DELIVERED',
    Viewed: 'VIEWED',
    EffectiveDate: 'EFFECTIVE_DATE',
    Paid: 'PAID',
    Unreachable: 'UNREACHABLE',
    Cancelled: 'CANCELLED',
    Refused: 'REFUSED',
    CancellationInProgress: 'CANCELLATION_IN_PROGRESS'
} as const;

export type NotificationStatus = typeof NotificationStatus[keyof typeof NotificationStatus];


/**
 * 
 * @export
 * @interface NotificationStatusHistory
 */
export interface NotificationStatusHistory {
    /**
     * 
     * @type {NotificationStatus}
     * @memberof NotificationStatusHistory
     */
    'status': NotificationStatus;
    /**
     * 
     * @type {string}
     * @memberof NotificationStatusHistory
     */
    'activeFrom': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NotificationStatusHistory
     */
    'relatedTimelineElements': Array<string>;
    /**
     * 
     * @type {Array<NotificationDetailTimeline>}
     * @memberof NotificationStatusHistory
     */
    'steps'?: Array<NotificationDetailTimeline>;
    /**
     * 
     * @type {string}
     * @memberof NotificationStatusHistory
     */
    'recipient'?: string;
    /**
     * 
     * @type {NotificationDeliveryMode}
     * @memberof NotificationStatusHistory
     */
    'deliveryMode'?: NotificationDeliveryMode;
}


/**
 * 
 * @export
 * @interface NotificationViewedCreationRequestDetailsV23
 */
export interface NotificationViewedCreationRequestDetailsV23 {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof NotificationViewedCreationRequestDetailsV23
     */
    'recIndex': number;
    /**
     * Identificativo dell\'atto opponibile a terzi del quale è stata richiesta la creazione
     * @type {string}
     * @memberof NotificationViewedCreationRequestDetailsV23
     */
    'legalfactId'?: string;
    /**
     * Data ricezione richiesta visualizzazione notifica
     * @type {string}
     * @memberof NotificationViewedCreationRequestDetailsV23
     */
    'eventTimestamp'?: string;
    /**
     * tipo di Rete Anti Digital Divide <br/> __FSU__: Fornitore Servizio Universale <br/> __ALT__: Fornitore RADD Alternativa <br/> 
     * @type {string}
     * @memberof NotificationViewedCreationRequestDetailsV23
     */
    'raddType'?: string;
    /**
     * Identificativo della pratica all\'interno della rete RADD
     * @type {string}
     * @memberof NotificationViewedCreationRequestDetailsV23
     */
    'raddTransactionId'?: string;
    /**
     * 
     * @type {DelegateInfo}
     * @memberof NotificationViewedCreationRequestDetailsV23
     */
    'delegateInfo'?: DelegateInfo;
}
/**
 * 
 * @export
 * @interface NotificationViewedDetailsV23
 */
export interface NotificationViewedDetailsV23 {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof NotificationViewedDetailsV23
     */
    'recIndex': number;
    /**
     * costo notifica in euro cents, può essere nullo se la notifica si è perfezionata prima per decorrenza termini
     * @type {number}
     * @memberof NotificationViewedDetailsV23
     */
    'notificationCost'?: number;
    /**
     * tipo di Rete Anti Digital Divide <br/> __FSU__: Fornitore Servizio Universale <br/> __ALT__: Fornitore RADD Alternativa <br/> 
     * @type {string}
     * @memberof NotificationViewedDetailsV23
     */
    'raddType'?: string;
    /**
     * Identificativo della pratica all\'interno della rete RADD
     * @type {string}
     * @memberof NotificationViewedDetailsV23
     */
    'raddTransactionId'?: string;
    /**
     * 
     * @type {DelegateInfo}
     * @memberof NotificationViewedDetailsV23
     */
    'delegateInfo'?: DelegateInfo;
    /**
     * Data evento visualizzazione
     * @type {string}
     * @memberof NotificationViewedDetailsV23
     */
    'eventTimestamp'?: string;
}
/**
 * Informazioni utili per effettuare il pagamento di una notifica, sono associate al destinatario perché le spese di notifica possono differire a seconda del canale di notifica utilizzato. <br/>   - _noticeCode_: \"codice avviso pagoPA\" di pagamento del sistema pagoPA, usato per pagamento online.<br/>   - _creditorTaxId_: codice fiscale dell\'ente a cui fa riferimento il \"codice avviso pagoPA\". <br/>   - _applyCost_: flag per indicare se l\'avviso pagoPA deve contenere i costi di notifica. <br/>   - _pagoPaForm_: riferimento al PDF contenete il bollettino pagoPA<br/>
 * @export
 * @interface PagoPaPayment
 */
export interface PagoPaPayment {
    /**
     * Payment notice number  numero avviso
     * @type {string}
     * @memberof PagoPaPayment
     */
    'noticeCode': string;
    /**
     * Payment PA fiscal code
     * @type {string}
     * @memberof PagoPaPayment
     */
    'creditorTaxId': string;
    /**
     * Flag per indicare se l\'avviso pagoPa deve contenere i costi di notifica
     * @type {boolean}
     * @memberof PagoPaPayment
     */
    'applyCost': boolean;
    /**
     * 
     * @type {NotificationPaymentAttachment}
     * @memberof PagoPaPayment
     */
    'attachment'?: NotificationPaymentAttachment;
}
/**
 * Indirizzo fisico scoperto durante fase di consegna
 * @export
 * @interface PhysicalAddress
 */
export interface PhysicalAddress {
    /**
     * Campo \"presso\" dell\'indirizzo
     * @type {string}
     * @memberof PhysicalAddress
     */
    'at'?: string;
    /**
     * Indirizzo del domicilio fisico
     * @type {string}
     * @memberof PhysicalAddress
     */
    'address': string;
    /**
     * Seconda riga dell\'indirizzo fisico
     * @type {string}
     * @memberof PhysicalAddress
     */
    'addressDetails'?: string;
    /**
     * Codice di avviamento postale. In caso di invio estero diventa facoltativo
     * @type {string}
     * @memberof PhysicalAddress
     */
    'zip'?: string;
    /**
     * Comune in cui l\'indirizzo si trova
     * @type {string}
     * @memberof PhysicalAddress
     */
    'municipality': string;
    /**
     * Frazione o località
     * @type {string}
     * @memberof PhysicalAddress
     */
    'municipalityDetails'?: string;
    /**
     * Provincia in cui si trova l\'indirizzo
     * @type {string}
     * @memberof PhysicalAddress
     */
    'province'?: string;
    /**
     * Denominazione paese estero
     * @type {string}
     * @memberof PhysicalAddress
     */
    'foreignState'?: string;
}
/**
 * 
 * @export
 * @interface PrepareAnalogDomicileFailureDetails
 */
export interface PrepareAnalogDomicileFailureDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof PrepareAnalogDomicileFailureDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof PrepareAnalogDomicileFailureDetails
     */
    'foundAddress'?: PhysicalAddress;
    /**
     * __Motivazione fallimento prepare   - __D00__ Indirizzo non trovato   - __D01__ Indirizzo non valido   - __D02__ Indirizzo coincidente con quello del primo tentativo 
     * @type {string}
     * @memberof PrepareAnalogDomicileFailureDetails
     */
    'failureCause'?: string;
    /**
     * RequestId della richiesta di prepare
     * @type {string}
     * @memberof PrepareAnalogDomicileFailureDetails
     */
    'prepareRequestId'?: string;
}
/**
 * 
 * @export
 * @interface PrepareDigitalDetails
 */
export interface PrepareDigitalDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof PrepareDigitalDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof PrepareDigitalDetails
     */
    'digitalAddress'?: DigitalAddress;
    /**
     * 
     * @type {DigitalAddressSource}
     * @memberof PrepareDigitalDetails
     */
    'digitalAddressSource': DigitalAddressSource;
    /**
     * numero dei tentativi effettuati
     * @type {number}
     * @memberof PrepareDigitalDetails
     */
    'retryNumber': number;
    /**
     * data tentativo precedente
     * @type {string}
     * @memberof PrepareDigitalDetails
     */
    'attemptDate'?: string;
    /**
     * 
     * @type {DigitalAddressSource}
     * @memberof PrepareDigitalDetails
     */
    'nextDigitalAddressSource'?: DigitalAddressSource;
    /**
     * numero del prossimo tentativo da effettuare
     * @type {number}
     * @memberof PrepareDigitalDetails
     */
    'nextSourceAttemptsMade'?: number;
    /**
     * data tentativo precedente per prossimo source
     * @type {string}
     * @memberof PrepareDigitalDetails
     */
    'nextLastAttemptMadeForSource'?: string;
}


/**
 * 
 * @export
 * @interface ProbableDateAnalogWorkflowDetails
 */
export interface ProbableDateAnalogWorkflowDetails {
    /**
     * Index destinatario che ha effettuato il pagamento della notifica
     * @type {number}
     * @memberof ProbableDateAnalogWorkflowDetails
     */
    'recIndex': number;
    /**
     * Data probabile di inizio del flusso analogico
     * @type {string}
     * @memberof ProbableDateAnalogWorkflowDetails
     */
    'schedulingAnalogDate': string;
}
/**
 * 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * URI reference of type definition
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof Problem
     */
    'status': number;
    /**
     * A short, summary of the problem type. Written in english and readable
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * A human readable explanation of the problem.
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * Internal support identifier associated to error
     * @type {string}
     * @memberof Problem
     */
    'traceId'?: string;
    /**
     * date and time referred to UTC
     * @type {string}
     * @memberof Problem
     */
    'timestamp'?: string;
    /**
     * 
     * @type {Array<ProblemError>}
     * @memberof Problem
     */
    'errors': Array<ProblemError>;
}
/**
 * 
 * @export
 * @interface ProblemError
 */
export interface ProblemError {
    /**
     * Internal code of the error, in human-readable format
     * @type {string}
     * @memberof ProblemError
     */
    'code': string;
    /**
     * Parameter or request body field name for validation error
     * @type {string}
     * @memberof ProblemError
     */
    'element'?: string;
    /**
     * A human readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ProblemError
     */
    'detail'?: string;
}
/**
 * 
 * @export
 * @interface PublicRegistryCallDetails
 */
export interface PublicRegistryCallDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof PublicRegistryCallDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DeliveryMode}
     * @memberof PublicRegistryCallDetails
     */
    'deliveryMode': DeliveryMode;
    /**
     * 
     * @type {ContactPhase}
     * @memberof PublicRegistryCallDetails
     */
    'contactPhase': ContactPhase;
    /**
     * Numero di tentativi di notificazione già effettuati
     * @type {number}
     * @memberof PublicRegistryCallDetails
     */
    'sentAttemptMade': number;
    /**
     * Data invio richiesta ai public registry
     * @type {string}
     * @memberof PublicRegistryCallDetails
     */
    'sendDate': string;
}


/**
 * 
 * @export
 * @interface PublicRegistryResponseDetails
 */
export interface PublicRegistryResponseDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof PublicRegistryResponseDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof PublicRegistryResponseDetails
     */
    'digitalAddress'?: DigitalAddress;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof PublicRegistryResponseDetails
     */
    'physicalAddress'?: PhysicalAddress;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RecipientType = {
    Pf: 'PF',
    Pg: 'PG'
} as const;

export type RecipientType = typeof RecipientType[keyof typeof RecipientType];


/**
 * 
 * @export
 * @interface RefinementDetailsV23
 */
export interface RefinementDetailsV23 {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof RefinementDetailsV23
     */
    'recIndex': number;
    /**
     * costo notifica in euro cents, può essere nullo se la notifica si è perfezionata prima per visualizzazione
     * @type {number}
     * @memberof RefinementDetailsV23
     */
    'notificationCost'?: number;
    /**
     * Data evento refinement
     * @type {string}
     * @memberof RefinementDetailsV23
     */
    'eventTimestamp'?: string;
}
/**
 * 
 * @export
 * @interface RequestRefusedDetailsV23
 */
export interface RequestRefusedDetailsV23 {
    /**
     * Motivazioni che hanno portato al rifiuto della notifica
     * @type {Array<NotificationRefusedErrorV23>}
     * @memberof RequestRefusedDetailsV23
     */
    'refusalReasons'?: Array<NotificationRefusedErrorV23>;
}
/**
 * stato risposta ricevuta da externalChannel
 * @export
 * @enum {string}
 */

export const ResponseStatus = {
    Ok: 'OK',
    Ko: 'KO'
} as const;

export type ResponseStatus = typeof ResponseStatus[keyof typeof ResponseStatus];


/**
 * 
 * @export
 * @interface ScheduleAnalogWorkflowDetailsV23
 */
export interface ScheduleAnalogWorkflowDetailsV23 {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof ScheduleAnalogWorkflowDetailsV23
     */
    'recIndex': number;
    /**
     * Data prevista per l\'inizio dell\'invio analogico
     * @type {string}
     * @memberof ScheduleAnalogWorkflowDetailsV23
     */
    'schedulingDate'?: string;
}
/**
 * 
 * @export
 * @interface ScheduleDigitalWorkflowDetailsV23
 */
export interface ScheduleDigitalWorkflowDetailsV23 {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof ScheduleDigitalWorkflowDetailsV23
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof ScheduleDigitalWorkflowDetailsV23
     */
    'digitalAddress'?: DigitalAddress;
    /**
     * 
     * @type {DigitalAddressSource}
     * @memberof ScheduleDigitalWorkflowDetailsV23
     */
    'digitalAddressSource': DigitalAddressSource;
    /**
     * 
     * @type {number}
     * @memberof ScheduleDigitalWorkflowDetailsV23
     */
    'sentAttemptMade': number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDigitalWorkflowDetailsV23
     */
    'lastAttemptDate': string;
    /**
     * Data prevista prossimo tentativo d\'invio digitale per quella specifica sorgente di indirizzo
     * @type {string}
     * @memberof ScheduleDigitalWorkflowDetailsV23
     */
    'schedulingDate'?: string;
}


/**
 * 
 * @export
 * @interface ScheduleRefinementDetails
 */
export interface ScheduleRefinementDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof ScheduleRefinementDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleRefinementDetails
     */
    'schedulingDate'?: string;
}
/**
 * 
 * @export
 * @interface SendAnalogDetails
 */
export interface SendAnalogDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof SendAnalogDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof SendAnalogDetails
     */
    'physicalAddress': PhysicalAddress;
    /**
     * 
     * @type {ServiceLevel}
     * @memberof SendAnalogDetails
     */
    'serviceLevel': ServiceLevel;
    /**
     * numero dei tentativi effettuati
     * @type {number}
     * @memberof SendAnalogDetails
     */
    'sentAttemptMade': number;
    /**
     * Id relativo alla eventuale precedente richiesta di invio cartaceo
     * @type {string}
     * @memberof SendAnalogDetails
     */
    'relatedRequestId'?: string;
    /**
     * Tipo di invio cartaceo effettivamente inviato   - __AR__: Raccomandata nazionale Andata e Ritorno   - __890__: Recapito a norma della legge 890/1982   - __RIR__: Raccomandata internazionale Andata e Ritorno 
     * @type {string}
     * @memberof SendAnalogDetails
     */
    'productType'?: string;
    /**
     * costo in eurocent dell\'invio
     * @type {number}
     * @memberof SendAnalogDetails
     */
    'analogCost'?: number;
    /**
     * numero delle pagina che compongono la spedizione cartacea
     * @type {number}
     * @memberof SendAnalogDetails
     */
    'numberOfPages'?: number;
    /**
     * peso in grammi della busta
     * @type {number}
     * @memberof SendAnalogDetails
     */
    'envelopeWeight'?: number;
    /**
     * request id della relativa richiesta di prepare
     * @type {string}
     * @memberof SendAnalogDetails
     */
    'prepareRequestId'?: string;
}


/**
 * 
 * @export
 * @interface SendAnalogFeedbackDetails
 */
export interface SendAnalogFeedbackDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof SendAnalogFeedbackDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof SendAnalogFeedbackDetails
     */
    'physicalAddress': PhysicalAddress;
    /**
     * 
     * @type {ServiceLevel}
     * @memberof SendAnalogFeedbackDetails
     */
    'serviceLevel': ServiceLevel;
    /**
     * numero dei tentativi effettuati
     * @type {number}
     * @memberof SendAnalogFeedbackDetails
     */
    'sentAttemptMade': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof SendAnalogFeedbackDetails
     */
    'newAddress'?: PhysicalAddress;
    /**
     * 
     * @type {ResponseStatus}
     * @memberof SendAnalogFeedbackDetails
     */
    'responseStatus': ResponseStatus;
    /**
     * 
     * @type {string}
     * @memberof SendAnalogFeedbackDetails
     */
    'notificationDate'?: string;
    /**
     * __Motivazione di mancata consegna__ obbligatorie negli stati di mancata consegna   - __M01__ destinatario irreperibile   - __M02__ destinatario deceduto   - __M03__ destinatario sconosciuto   - __M04__ destinatario trasferito   - __M05__ invio rifiutato   - __M06__ indirizzo inesatto   - __M07__ indirizzo inesistente   - __M08__ indirizzo insufficiente   - __F01__ - in caso di furto   - __F02__ - in caso di smarrimento   - __F03__ - in caso di deterioramento 
     * @type {string}
     * @memberof SendAnalogFeedbackDetails
     */
    'deliveryFailureCause'?: string;
    /**
     * Formato: - __deliveryDetailCode__- [prodotto] - [statusCode] - statusDescription   - __CON080__- [ALL] - [PROGRESS] - Stampato ed Imbustato   - __RECRS001C__- [RS] - [OK] - Consegnato - Fascicolo Chiuso   - __RECRS002C__- [RS] - [KO] - Mancata consegna - Fascicolo Chiuso   - __RECRS002F__- [RS] - [KO] - Irreperibilità Assoluta - Fascicolo Chiuso   - __RECRS003C__- [RS] - [OK] - Consegnato presso Punti di Giacenza - Fascicolo Chiuso   - __RECRS004C__- [RS] - [OK] - Mancata consegna presso Punti di Giacenza - Fascicolo Chiuso   - __RECRS005C__- [RS] - [OK] - Compiuta giacenza - Fascicolo Chiuso   - __RECRS006__- [RS] - [PROGRESS] - Furto/Smarrimento/deterioramento   - __RECRN001C__- [AR] - [OK] - Consegnato - Fascicolo Chiuso   - __RECRN002C__- [AR] - [KO] - Mancata consegna - Fascicolo Chiuso   - __RECRN002F__- [AR] - [KO] - Irreperibilità Assoluta - Fascicolo Chiuso   - __RECRN003C__- [AR] - [OK] - Consegnato presso Punti di Giacenza - Fascicolo Chiuso   - __RECRN004C__- [AR] - [KO] - Mancata consegna presso Punti di Giacenza - Fascicolo Chiuso   - __RECRN005C__- [AR] - [OK] - Compiuta giacenza - Fascicolo Chiuso   - __RECRN006__- [AR] - [PROGRESS] - Furto/Smarrimento/deterioramento   - __RECAG001C__- [890] - [OK] - Consegnato - Fascicolo Chiuso   - __RECAG002C__- [890] - [OK] - Consegnato a persona abilitata - Fascicolo Chiuso   - __RECAG003C__- [890] - [KO] - Mancata consegna - Fascicolo Chiuso   - __RECAG003F__- [890] - [KO] - Irreperibilità Assoluta - Fascicolo Chiuso   - __RECAG004__- [890] - [PROGRESS] - Furto/Smarrimento/deterioramento   - __RECAG005C__- [890] - [OK | PROGRESS] - Consegnato presso Punti di Giacenza - Fascicolo Chiuso   - __RECAG006C__- [890] - [OK | PROGRESS] - Consegna a persona abilitata presso Punti di Giacenza - Fas. Ch.   - __RECAG007C__- [890] - [KO | PROGRESS] - Mancata consegna presso Punti di Giacenza - Fascicolo Chiuso   - __RECAG008C__- [890] - [PROGRESS] - Compiuta giacenza - Fascicolo Chiuso   - __PNAG012__- [890] - [KO] - Distacco d\'ufficio 23L - Fascicolo Chiuso   - __RECRI003C__- [RIR] - [OK] - Consegnato - Fascicolo Chiuso   - __RECRI004C__- [RIR] - [KO] - Non Consegnato - fascicolo Chiuso   - __RECRI005__- [RIR] - [PROGRESS] - Furto/Smarrimento/deterioramento   - __RECRSI003C__- [RIS] - [OK] - Consegnato - Fascicolo Chiuso   - __RECRSI004C__- [RIS] - [KO] - Non Consegnato - fascicolo Chiuso   - __RECRSI005__- [RIS] - [PROGRESS] - Furto/Smarrimento/deterioramento 
     * @type {string}
     * @memberof SendAnalogFeedbackDetails
     */
    'deliveryDetailCode'?: string;
    /**
     * 
     * @type {Array<AttachmentDetails>}
     * @memberof SendAnalogFeedbackDetails
     */
    'attachments'?: Array<AttachmentDetails>;
    /**
     * RequestId della richiesta d\'invio
     * @type {string}
     * @memberof SendAnalogFeedbackDetails
     */
    'sendRequestId'?: string;
    /**
     * Codice della raccomandata
     * @type {string}
     * @memberof SendAnalogFeedbackDetails
     */
    'registeredLetterCode'?: string;
}


/**
 * 
 * @export
 * @interface SendAnalogProgressDetailsV23
 */
export interface SendAnalogProgressDetailsV23 {
    /**
     * Index destinatario che ha effettuato il pagamento della notifica
     * @type {number}
     * @memberof SendAnalogProgressDetailsV23
     */
    'recIndex': number;
    /**
     * 
     * @type {string}
     * @memberof SendAnalogProgressDetailsV23
     */
    'notificationDate'?: string;
    /**
     * Vedi deliveryFailureCause in SendAnalogFeedbackDetails
     * @type {string}
     * @memberof SendAnalogProgressDetailsV23
     */
    'deliveryFailureCause'?: string;
    /**
     * Vedi deliveryDetailCode in SendAnalogFeedbackDetails
     * @type {string}
     * @memberof SendAnalogProgressDetailsV23
     */
    'deliveryDetailCode'?: string;
    /**
     * 
     * @type {Array<AttachmentDetails>}
     * @memberof SendAnalogProgressDetailsV23
     */
    'attachments'?: Array<AttachmentDetails>;
    /**
     * RequestId della richiesta d\'invio
     * @type {string}
     * @memberof SendAnalogProgressDetailsV23
     */
    'sendRequestId'?: string;
    /**
     * Codice della raccomandata
     * @type {string}
     * @memberof SendAnalogProgressDetailsV23
     */
    'registeredLetterCode'?: string;
    /**
     * 
     * @type {ServiceLevel}
     * @memberof SendAnalogProgressDetailsV23
     */
    'serviceLevel'?: ServiceLevel;
}


/**
 * 
 * @export
 * @interface SendCourtesyMessageDetails
 */
export interface SendCourtesyMessageDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof SendCourtesyMessageDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof SendCourtesyMessageDetails
     */
    'digitalAddress': DigitalAddress;
    /**
     * data invio messaggio di cortesia
     * @type {string}
     * @memberof SendCourtesyMessageDetails
     */
    'sendDate': string;
    /**
     * 
     * @type {IoSendMessageResult}
     * @memberof SendCourtesyMessageDetails
     */
    'ioSendMessageResult'?: IoSendMessageResult;
}


/**
 * 
 * @export
 * @interface SendDigitalDetails
 */
export interface SendDigitalDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof SendDigitalDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof SendDigitalDetails
     */
    'digitalAddress': DigitalAddress;
    /**
     * 
     * @type {DigitalAddressSource}
     * @memberof SendDigitalDetails
     */
    'digitalAddressSource': DigitalAddressSource;
    /**
     * numero dei tentativi effettuati
     * @type {number}
     * @memberof SendDigitalDetails
     */
    'retryNumber': number;
}


/**
 * 
 * @export
 * @interface SendDigitalFeedbackDetails
 */
export interface SendDigitalFeedbackDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof SendDigitalFeedbackDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof SendDigitalFeedbackDetails
     */
    'digitalAddress': DigitalAddress;
    /**
     * 
     * @type {ResponseStatus}
     * @memberof SendDigitalFeedbackDetails
     */
    'responseStatus': ResponseStatus;
    /**
     * data notifica
     * @type {string}
     * @memberof SendDigitalFeedbackDetails
     */
    'notificationDate': string;
    /**
     * Codice errore, vuoto in caso di successo
     * @type {string}
     * @memberof SendDigitalFeedbackDetails
     */
    'deliveryFailureCause'?: string;
    /**
     * Stato - Codice relativo all\'evento - Descrizione:   - PROGRESS   C000 = PREACCETTAZIONE   - PROGRESS   C001 = ACCETTAZIONE   - PROGRESS   C005 = PRESA_IN_CARICO   - PROGRESS   C007 = PREAVVISO_ERRORE_CONSEGNA   - PROGRESS   DP00 = RE-INVIO PEC CAUSA FALLIMENTO TEMPORANEO   - PROGRESS   DP10 = TIMEOUT RICEZIONE RISULTATO   - ERROR      C002 = NON_ACCETTAZIONE   - ERROR      C004 = ERRORE_CONSEGNA   - ERROR      C006 = RILEVAZIONE_VIRUS   - ERROR      C008 = ERRORE_COMUNICAZIONE_SERVER_PEC   - ERROR      C009 = ERRORE_DOMINIO_PEC_NON_VALIDO   - ERROR      C010 = ERROR_INVIO_PEC   - OK         C003 = AVVENUTA_CONSEGNA 
     * @type {string}
     * @memberof SendDigitalFeedbackDetails
     */
    'deliveryDetailCode'?: string;
    /**
     * 
     * @type {Array<SendingReceipt>}
     * @memberof SendDigitalFeedbackDetails
     */
    'sendingReceipts'?: Array<SendingReceipt>;
}


/**
 * 
 * @export
 * @interface SendDigitalProgressDetailsV23
 */
export interface SendDigitalProgressDetailsV23 {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof SendDigitalProgressDetailsV23
     */
    'recIndex'?: number;
    /**
     * Codice errore, opzionale
     * @type {string}
     * @memberof SendDigitalProgressDetailsV23
     */
    'deliveryFailureCause'?: string;
    /**
     * Vedi deliveryDetailCode in SendDigitalFeedbackDetails
     * @type {string}
     * @memberof SendDigitalProgressDetailsV23
     */
    'deliveryDetailCode'?: string;
    /**
     * indica se il progress ha dato luogo ad un ritentativo
     * @type {boolean}
     * @memberof SendDigitalProgressDetailsV23
     */
    'shouldRetry'?: boolean;
    /**
     * 
     * @type {DigitalAddress}
     * @memberof SendDigitalProgressDetailsV23
     */
    'digitalAddress'?: DigitalAddress;
    /**
     * 
     * @type {DigitalAddressSource}
     * @memberof SendDigitalProgressDetailsV23
     */
    'digitalAddressSource'?: DigitalAddressSource;
    /**
     * data notifica
     * @type {string}
     * @memberof SendDigitalProgressDetailsV23
     */
    'notificationDate'?: string;
    /**
     * 
     * @type {Array<SendingReceipt>}
     * @memberof SendDigitalProgressDetailsV23
     */
    'sendingReceipts'?: Array<SendingReceipt>;
    /**
     * numero dei tentativi effettuati
     * @type {number}
     * @memberof SendDigitalProgressDetailsV23
     */
    'retryNumber'?: number;
    /**
     * Data evento
     * @type {string}
     * @memberof SendDigitalProgressDetailsV23
     */
    'eventTimestamp'?: string;
}


/**
 * 
 * @export
 * @interface SenderAckCreationRequestDetails
 */
export interface SenderAckCreationRequestDetails {
    /**
     * Identificativo dell\'atto opponibile a terzi del quale è stata richiesta la creazione
     * @type {string}
     * @memberof SenderAckCreationRequestDetails
     */
    'legalFactId'?: string;
}
/**
 * 
 * @export
 * @interface SendingReceipt
 */
export interface SendingReceipt {
    /**
     * 
     * @type {string}
     * @memberof SendingReceipt
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendingReceipt
     */
    'system'?: string;
}
/**
 * Le informazioni riguardanti una richiesta di notifica accettata
 * @export
 * @interface SentNotificationV23
 */
export interface SentNotificationV23 {
    /**
     * Identificativo utilizzabile dal chiamante per disambiguare differenti  \"richieste di notificazione\" effettuate con lo stesso numero di protocollo  (campo _paProtocolNumber_). Questo può essere necessario in caso di  \"richiesta di notifica\" rifiutata per errori nei codici di verifica degli allegati.
     * @type {string}
     * @memberof SentNotificationV23
     */
    'idempotenceToken'?: string;
    /**
     * Numero di protocollo che la PA mittente assegna alla notifica stessa
     * @type {string}
     * @memberof SentNotificationV23
     */
    'paProtocolNumber': string;
    /**
     * titolo della notifica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'subject': string;
    /**
     * descrizione sintetica della notifica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'abstract'?: string;
    /**
     * Informazioni sui destinatari
     * @type {Array<NotificationRecipientV23>}
     * @memberof SentNotificationV23
     */
    'recipients': Array<NotificationRecipientV23>;
    /**
     * Documenti notificati
     * @type {Array<NotificationDocument>}
     * @memberof SentNotificationV23
     */
    'documents': Array<NotificationDocument>;
    /**
     * 
     * @type {NotificationFeePolicy}
     * @memberof SentNotificationV23
     */
    'notificationFeePolicy': NotificationFeePolicy;
    /**
     * Identificativo Univoco Notifica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'cancelledIun'?: string;
    /**
     * Tipologia comunicazione fisica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'physicalCommunicationType': SentNotificationV23PhysicalCommunicationTypeEnum;
    /**
     * Denominazione ente o persona fisica / ragione sociale
     * @type {string}
     * @memberof SentNotificationV23
     */
    'senderDenomination': string;
    /**
     * Payment PA fiscal code
     * @type {string}
     * @memberof SentNotificationV23
     */
    'senderTaxId': string;
    /**
     * Gruppo di utenti dell\'ente mittente che può visualizzare la notifica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'group'?: string;
    /**
     * Importo della notifica in eurocent
     * @type {number}
     * @memberof SentNotificationV23
     */
    'amount'?: number;
    /**
     * Data di scadenza del pagamento nel formato YYYY-MM-DD riferito all\'Italia
     * @type {string}
     * @memberof SentNotificationV23
     */
    'paymentExpirationDate'?: string;
    /**
     * Codice tassonomico della notifica basato sulla definizione presente nell\'allegato 2 capitolo C del bando [__AVVISO PUBBLICO MISURA 1.4.5 PIATTAFORMA NOTIFICHE DIGITALI__](https://pnrrcomuni.fondazioneifel.it/bandi_public/Bando/325)
     * @type {string}
     * @memberof SentNotificationV23
     */
    'taxonomyCode': string;
    /**
     * Costo espresso in eurocent che la PA imputa per la notifica. <br/> Obbligatoria per notifiche con notificationFeePolicy=DELIVERY_MODE<br/> Il default nei casi di non obbligatorietà è 100 <br/> Esempio paFee ad 1€ -> 100 <br/>
     * @type {number}
     * @memberof SentNotificationV23
     */
    'paFee'?: number;
    /**
     * IVA espressa in percentuale imposta al mittente sulla notifica analogica. <br/> Obbligatoria per notifiche con notificationFeePolicy=DELIVERY_MODE. <br/> Il default nei casi di non obbligatorietà è 22 <br/> Esempio vat al 22% -> 22 <br/>
     * @type {number}
     * @memberof SentNotificationV23
     */
    'vat'?: number;
    /**
     * Modalitá di integrazione pagoPA per l\'attualizazione del costo della notifica. <br/> - _NONE_: nessuna attualizzazione. <br/> - _SYNC_: modalitá sincrona. <br/> - _ASYNC_: modalitá asincrona. (non ancora supportata)<br/>
     * @type {string}
     * @memberof SentNotificationV23
     */
    'pagoPaIntMode'?: SentNotificationV23PagoPaIntModeEnum;
    /**
     * Identificativo (non IPA) della PA mittente che ha eseguito l\'onboarding su SelfCare.
     * @type {string}
     * @memberof SentNotificationV23
     */
    'senderPaId'?: string;
    /**
     * Identificativo Univoco Notifica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'iun': string;
    /**
     * Momento di ricezione della notifica da parte di PN
     * @type {string}
     * @memberof SentNotificationV23
     */
    'sentAt': string;
    /**
     * Identificativo Univoco Notifica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'cancelledByIun'?: string;
    /**
     * Indica se i documenti notificati sono ancora disponibili.
     * @type {boolean}
     * @memberof SentNotificationV23
     */
    'documentsAvailable'?: boolean;
    /**
     * Indica la versione della notifica
     * @type {string}
     * @memberof SentNotificationV23
     */
    'version'?: string;
}

export const SentNotificationV23PhysicalCommunicationTypeEnum = {
    ArRegisteredLetter: 'AR_REGISTERED_LETTER',
    RegisteredLetter890: 'REGISTERED_LETTER_890'
} as const;

export type SentNotificationV23PhysicalCommunicationTypeEnum = typeof SentNotificationV23PhysicalCommunicationTypeEnum[keyof typeof SentNotificationV23PhysicalCommunicationTypeEnum];
export const SentNotificationV23PagoPaIntModeEnum = {
    None: 'NONE',
    Sync: 'SYNC',
    Async: 'ASYNC'
} as const;

export type SentNotificationV23PagoPaIntModeEnum = typeof SentNotificationV23PagoPaIntModeEnum[keyof typeof SentNotificationV23PagoPaIntModeEnum];

/**
 * Livello Servizio
 * @export
 * @enum {string}
 */

export const ServiceLevel = {
    ArRegisteredLetter: 'AR_REGISTERED_LETTER',
    RegisteredLetter890: 'REGISTERED_LETTER_890'
} as const;

export type ServiceLevel = typeof ServiceLevel[keyof typeof ServiceLevel];


/**
 * 
 * @export
 * @interface SimpleRegisteredLetterDetails
 */
export interface SimpleRegisteredLetterDetails {
    /**
     * Index destinatario notifica digitale
     * @type {number}
     * @memberof SimpleRegisteredLetterDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {PhysicalAddress}
     * @memberof SimpleRegisteredLetterDetails
     */
    'physicalAddress': PhysicalAddress;
    /**
     * Tipo di invio cartaceo effettivamente inviato   - __RS__: Raccomandata nazionale Semplice (per Avviso di mancato Recapito)   - __RIS__: Raccomandata internazionale Semplice 
     * @type {string}
     * @memberof SimpleRegisteredLetterDetails
     */
    'productType'?: string;
    /**
     * costo in eurocent dell\'invio
     * @type {number}
     * @memberof SimpleRegisteredLetterDetails
     */
    'analogCost'?: number;
    /**
     * numero delle pagina che compongono la spedizione cartacea
     * @type {number}
     * @memberof SimpleRegisteredLetterDetails
     */
    'numberOfPages'?: number;
    /**
     * peso in grammi della busta
     * @type {number}
     * @memberof SimpleRegisteredLetterDetails
     */
    'envelopeWeight'?: number;
    /**
     * request id della relativa richiesta di prepare
     * @type {string}
     * @memberof SimpleRegisteredLetterDetails
     */
    'prepareRequestId'?: string;
}
/**
 * 
 * @export
 * @interface SimpleRegisteredLetterProgressDetails
 */
export interface SimpleRegisteredLetterProgressDetails {
    /**
     * Index destinatario che ha effettuato il pagamento della notifica
     * @type {number}
     * @memberof SimpleRegisteredLetterProgressDetails
     */
    'recIndex': number;
    /**
     * 
     * @type {string}
     * @memberof SimpleRegisteredLetterProgressDetails
     */
    'notificationDate'?: string;
    /**
     * Vedi deliveryFailureCause in SendAnalogFeedbackDetails
     * @type {string}
     * @memberof SimpleRegisteredLetterProgressDetails
     */
    'deliveryFailureCause'?: string;
    /**
     * Vedi deliveryDetailCode in SendAnalogFeedbackDetails
     * @type {string}
     * @memberof SimpleRegisteredLetterProgressDetails
     */
    'deliveryDetailCode'?: string;
    /**
     * 
     * @type {Array<AttachmentDetails>}
     * @memberof SimpleRegisteredLetterProgressDetails
     */
    'attachments'?: Array<AttachmentDetails>;
    /**
     * RequestId della richiesta d\'invio
     * @type {string}
     * @memberof SimpleRegisteredLetterProgressDetails
     */
    'sendRequestId'?: string;
    /**
     * Codice della raccomandata
     * @type {string}
     * @memberof SimpleRegisteredLetterProgressDetails
     */
    'registeredLetterCode'?: string;
}
/**
 * 
 * @export
 * @interface StatusSchema
 */
export interface StatusSchema {
    /**
     * Stato dell\'applicazione.
     * @type {string}
     * @memberof StatusSchema
     */
    'status': string;
}
/**
 * stato di avanzamento del processo di notifica:`   * `SENDER_ACK_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto opponibile a terzi di presa in carico per il mittente a safe storage   * `VALIDATE_NORMALIZE_ADDRESSES_REQUEST` - Invio della richiesta di validazione e normalizzazione indirizzi fisici presenti nella richiesta di notifica   * `NORMALIZED_ADDRESS` - Salvataggio indirizzi normalizzati   * `REQUEST_ACCEPTED` - Richiesta di notifica accettata a seguito dei controlli di validazione   * `REQUEST_REFUSED` - Richiesta di notifica rifiutata per fallimento di validazione   * `SEND_COURTESY_MESSAGE` - Invio di un messaggio di cortesia   * `GET_ADDRESS` - Disponibilità dell’indirizzo specifico (domicilio digitale di piattaforma, domicilio digitale speciale, domicilio digitale generale, indirizzo fisico sulla notifica o sui registri nazionali)   * `PUBLIC_REGISTRY_CALL` - Richiesta ai registri pubblici per ottenere domicilio digitale generale o per ottenere indirizzo fisico da ANPR, da registro della imprese, da anagrafe tributaria.   * `PUBLIC_REGISTRY_RESPONSE` - Ricevuta la risposta dei registri pubblici   * `SCHEDULE_ANALOG_WORKFLOW` - Pianificazione del workflow per invio cartaceo   * `SCHEDULE_DIGITAL_WORKFLOW` -Pianificazione del workflow per invio digitale (PEC) del secondo tentativo in caso di fallimento del primo.   * `PREPARE_DIGITAL_DOMICILE` - Preparazione per l’invio dell’avviso digitale.Va a valutare la timeline per capire quale sarà il prossimo indirizzo da usare.   * `SEND_DIGITAL_DOMICILE` - Invio digitale dell’avviso di notifica   * `SEND_DIGITAL_PROGRESS` - Tentativo di Invio PEC ad un determinato indirizzo.   * `SEND_DIGITAL_FEEDBACK` - Ottenuto esito ad un invio digitale   * `SCHEDULE_REFINEMENT` - Pianificato il perfezionamento per decorrenza termini   * `REFINEMENT` - Perfezionamento per decorrenza termini   * `DIGITAL_DELIVERY_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto opponibile a terzi di chiusura del workflow digitale a safe storage   * `DIGITAL_SUCCESS_WORKFLOW` - Completato con successo il workflow di invio digitale   * `DIGITAL_FAILURE_WORKFLOW` - Completato con fallimento il workflow di invio digitale: tutti i tentativi di invio ai domicili digitali sono falliti.   * `ANALOG_SUCCESS_WORKFLOW` - Completato con successo il workflow di invio cartaceo   * `ANALOG_FAILURE_WORKFLOW` - Completato con fallimento il workflow di invio cartaceo NOTA: se per tutti i destinatari si conclude il workflow con fallimento verrà scatenato l’evento COMPLETELY_UNREACHABLE   * `PREPARE_SIMPLE_REGISTERED_LETTER` - Invio richiesta di prepare (preparazione ad invio) raccomandata semplice a paperChannel   * `SEND_SIMPLE_REGISTERED_LETTER` - Invio di raccomandata semplice   * `SEND_SIMPLE_REGISTERED_LETTER_PROGRESS` - Ricezione informazioni intermedia relative ad una notificazione cartacea semplice   * `NOTIFICATION_VIEWED_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto opponibile a terzi di presa visione a safe storage   * `NOTIFICATION_VIEWED` - Visualizzazione della notifica (perfeziona la notifica se non già perfezionata per decorrenza termini o da altro destinatario)   * `PREPARE_ANALOG_DOMICILE` - Invio richiesta di prepare (preparazione ad invio) cartaceo a paperChannel   * `SEND_ANALOG_DOMICILE` - Invio cartaceo dell’avviso di notifica   * `SEND_ANALOG_PROGRESS` - Ricezione informazioni intermedia relative ad una notificazione cartacea   * `SEND_ANALOG_FEEDBACK` - Ricezione esito dell\'invio cartaceo   * `COMPLETELY_UNREACHABLE_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto (simile a opponibile a terzi) di completamento con fallimento del workflow di invio cartaceo   * `COMPLETELY_UNREACHABLE` - Tutti i destinatari risultano irraggiungibili   * `AAR_CREATION_REQUEST` - Invio della richiesta di creazione dell\'AAR (Avviso di Avvenuta Ricezione) a safe storage   * `AAR_GENERATION` - Generazione dell’AAR (Avviso di Avvenuta Ricezione)   * `PAYMENT` - Ricezione pagamento della notifica   * `NOT_HANDLED` - Per la sperimentazione l\'invio analogico non è previsto, viene inserito tale elemento di timeline   * `PROBABLE_SCHEDULING_ANALOG_DATE` - Data probabile di inizio del flusso analogico   * `NOTIFICATION_CANCELLATION_REQUEST` - Richiesta di annullamento di una notifica   * `NOTIFICATION_CANCELLED` - Notifica annullata   * `PREPARE_ANALOG_DOMICILE_FAILURE` - Fallimento della richiesta di prepare (preparazione ad invio) cartaceo a paperChannel   * `NOTIFICATION_RADD_RETRIEVED` - Accesso alla notifica tramite la rete RADD. Non perfeziona la notifica. 
 * @export
 * @enum {string}
 */

export const TimelineCategory = {
    SenderAckCreationRequest: 'SENDER_ACK_CREATION_REQUEST',
    ValidateNormalizeAddressesRequest: 'VALIDATE_NORMALIZE_ADDRESSES_REQUEST',
    NormalizedAddress: 'NORMALIZED_ADDRESS',
    RequestAccepted: 'REQUEST_ACCEPTED',
    SendCourtesyMessage: 'SEND_COURTESY_MESSAGE',
    GetAddress: 'GET_ADDRESS',
    PublicRegistryCall: 'PUBLIC_REGISTRY_CALL',
    PublicRegistryResponse: 'PUBLIC_REGISTRY_RESPONSE',
    ScheduleAnalogWorkflow: 'SCHEDULE_ANALOG_WORKFLOW',
    ScheduleDigitalWorkflow: 'SCHEDULE_DIGITAL_WORKFLOW',
    PrepareDigitalDomicile: 'PREPARE_DIGITAL_DOMICILE',
    SendDigitalDomicile: 'SEND_DIGITAL_DOMICILE',
    SendDigitalProgress: 'SEND_DIGITAL_PROGRESS',
    SendDigitalFeedback: 'SEND_DIGITAL_FEEDBACK',
    Refinement: 'REFINEMENT',
    ScheduleRefinement: 'SCHEDULE_REFINEMENT',
    DigitalDeliveryCreationRequest: 'DIGITAL_DELIVERY_CREATION_REQUEST',
    DigitalSuccessWorkflow: 'DIGITAL_SUCCESS_WORKFLOW',
    DigitalFailureWorkflow: 'DIGITAL_FAILURE_WORKFLOW',
    AnalogSuccessWorkflow: 'ANALOG_SUCCESS_WORKFLOW',
    AnalogFailureWorkflow: 'ANALOG_FAILURE_WORKFLOW',
    PrepareSimpleRegisteredLetter: 'PREPARE_SIMPLE_REGISTERED_LETTER',
    SendSimpleRegisteredLetter: 'SEND_SIMPLE_REGISTERED_LETTER',
    SendSimpleRegisteredLetterProgress: 'SEND_SIMPLE_REGISTERED_LETTER_PROGRESS',
    NotificationViewedCreationRequest: 'NOTIFICATION_VIEWED_CREATION_REQUEST',
    NotificationViewed: 'NOTIFICATION_VIEWED',
    PrepareAnalogDomicile: 'PREPARE_ANALOG_DOMICILE',
    SendAnalogDomicile: 'SEND_ANALOG_DOMICILE',
    SendAnalogProgress: 'SEND_ANALOG_PROGRESS',
    SendAnalogFeedback: 'SEND_ANALOG_FEEDBACK',
    Payment: 'PAYMENT',
    CompletelyUnreachable: 'COMPLETELY_UNREACHABLE',
    CompletelyUnreachableCreationRequest: 'COMPLETELY_UNREACHABLE_CREATION_REQUEST',
    RequestRefused: 'REQUEST_REFUSED',
    AarCreationRequest: 'AAR_CREATION_REQUEST',
    AarGeneration: 'AAR_GENERATION',
    NotHandled: 'NOT_HANDLED',
    ProbableSchedulingAnalogDate: 'PROBABLE_SCHEDULING_ANALOG_DATE',
    NotificationCancellationRequest: 'NOTIFICATION_CANCELLATION_REQUEST',
    NotificationCancelled: 'NOTIFICATION_CANCELLED',
    PrepareAnalogDomicileFailure: 'PREPARE_ANALOG_DOMICILE_FAILURE',
    NotificationRaddRetrieved: 'NOTIFICATION_RADD_RETRIEVED'
} as const;

export type TimelineCategory = typeof TimelineCategory[keyof typeof TimelineCategory];


/**
 * stato di avanzamento del processo di notifica:`   * `SENDER_ACK_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto opponibile a terzi di presa in carico per il mittente a safe storage   * `VALIDATE_NORMALIZE_ADDRESSES_REQUEST` - Invio della richiesta di validazione e normalizzazione indirizzi fisici presenti nella richiesta di notifica   * `NORMALIZED_ADDRESS` - Salvataggio indirizzi normalizzati   * `REQUEST_ACCEPTED` - Richiesta di notifica accettata a seguito dei controlli di validazione   * `REQUEST_REFUSED` - Richiesta di notifica rifiutata per fallimento di validazione   * `SEND_COURTESY_MESSAGE` - Invio di un messaggio di cortesia   * `GET_ADDRESS` - Disponibilità dell’indirizzo specifico (domicilio digitale di piattaforma, domicilio digitale speciale, domicilio digitale generale, indirizzo fisico sulla notifica o sui registri nazionali)   * `PUBLIC_REGISTRY_CALL` - Richiesta ai registri pubblici per ottenere domicilio digitale generale o per ottenere indirizzo fisico da ANPR, da registro della imprese, da anagrafe tributaria.   * `PUBLIC_REGISTRY_RESPONSE` - Ricevuta la risposta dei registri pubblici   * `SCHEDULE_ANALOG_WORKFLOW` - Pianificazione del workflow per invio cartaceo   * `SCHEDULE_DIGITAL_WORKFLOW` -Pianificazione del workflow per invio digitale (PEC) del secondo tentativo in caso di fallimento del primo.   * `PREPARE_DIGITAL_DOMICILE` - Preparazione per l’invio dell’avviso digitale.Va a valutare la timeline per capire quale sarà il prossimo indirizzo da usare.   * `SEND_DIGITAL_DOMICILE` - Invio digitale dell’avviso di notifica   * `SEND_DIGITAL_PROGRESS` - Tentativo di Invio PEC ad un determinato indirizzo.   * `SEND_DIGITAL_FEEDBACK` - Ottenuto esito ad un invio digitale   * `SCHEDULE_REFINEMENT` - Pianificato il perfezionamento per decorrenza termini   * `REFINEMENT` - Perfezionamento per decorrenza termini   * `DIGITAL_DELIVERY_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto opponibile a terzi di chiusura del workflow digitale a safe storage   * `DIGITAL_SUCCESS_WORKFLOW` - Completato con successo il workflow di invio digitale   * `DIGITAL_FAILURE_WORKFLOW` - Completato con fallimento il workflow di invio digitale: tutti i tentativi di invio ai domicili digitali sono falliti.   * `ANALOG_SUCCESS_WORKFLOW` - Completato con successo il workflow di invio cartaceo   * `ANALOG_FAILURE_WORKFLOW` - Completato con fallimento il workflow di invio cartaceo NOTA: se per tutti i destinatari si conclude il workflow con fallimento verrà scatenato l’evento COMPLETELY_UNREACHABLE   * `PREPARE_SIMPLE_REGISTERED_LETTER` - Invio richiesta di prepare (preparazione ad invio) raccomandata semplice a paperChannel   * `SEND_SIMPLE_REGISTERED_LETTER` - Invio di raccomandata semplice   * `SEND_SIMPLE_REGISTERED_LETTER_PROGRESS` - Ricezione informazioni intermedia relative ad una notificazione cartacea semplice   * `NOTIFICATION_VIEWED_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto opponibile a terzi di presa visione a safe storage   * `NOTIFICATION_VIEWED` - Visualizzazione della notifica (perfeziona la notifica se non già perfezionata per decorrenza termini o da altro destinatario)   * `PREPARE_ANALOG_DOMICILE` - Invio richiesta di prepare (preparazione ad invio) cartaceo a paperChannel   * `SEND_ANALOG_DOMICILE` - Invio cartaceo dell’avviso di notifica   * `SEND_ANALOG_PROGRESS` - Ricezione informazioni intermedia relative ad una notificazione cartacea   * `SEND_ANALOG_FEEDBACK` - Ricezione esito dell\'invio cartaceo   * `COMPLETELY_UNREACHABLE_CREATION_REQUEST` - Invio della richiesta di creazione dell\'atto (simile a opponibile a terzi) di completamento con fallimento del workflow di invio cartaceo   * `COMPLETELY_UNREACHABLE` - Tutti i destinatari risultano irraggiungibili   * `AAR_CREATION_REQUEST` - Invio della richiesta di creazione dell\'AAR (Avviso di Avvenuta Ricezione) a safe storage   * `AAR_GENERATION` - Generazione dell’AAR (Avviso di Avvenuta Ricezione)   * `PAYMENT` - Ricezione pagamento della notifica   * `NOT_HANDLED` - Per la sperimentazione l\'invio analogico non è previsto, viene inserito tale elemento di timeline   * `PROBABLE_SCHEDULING_ANALOG_DATE` - Data probabile di inizio del flusso analogico   * `NOTIFICATION_CANCELLATION_REQUEST` - Richiesta di annullamento di una notifica   * `NOTIFICATION_CANCELLED` - Notifica annullata   * `PREPARE_ANALOG_DOMICILE_FAILURE` - Fallimento della richiesta di prepare (preparazione ad invio) cartaceo a paperChannel   * `NOTIFICATION_RADD_RETRIEVED` - Accesso alla notifica tramite la rete RADD. Non perfeziona la notifica. 
 * @export
 * @enum {string}
 */

export const TimelineElementCategoryV23 = {
    SenderAckCreationRequest: 'SENDER_ACK_CREATION_REQUEST',
    ValidateNormalizeAddressesRequest: 'VALIDATE_NORMALIZE_ADDRESSES_REQUEST',
    NormalizedAddress: 'NORMALIZED_ADDRESS',
    RequestAccepted: 'REQUEST_ACCEPTED',
    SendCourtesyMessage: 'SEND_COURTESY_MESSAGE',
    GetAddress: 'GET_ADDRESS',
    PublicRegistryCall: 'PUBLIC_REGISTRY_CALL',
    PublicRegistryResponse: 'PUBLIC_REGISTRY_RESPONSE',
    ScheduleAnalogWorkflow: 'SCHEDULE_ANALOG_WORKFLOW',
    ScheduleDigitalWorkflow: 'SCHEDULE_DIGITAL_WORKFLOW',
    PrepareDigitalDomicile: 'PREPARE_DIGITAL_DOMICILE',
    SendDigitalDomicile: 'SEND_DIGITAL_DOMICILE',
    SendDigitalProgress: 'SEND_DIGITAL_PROGRESS',
    SendDigitalFeedback: 'SEND_DIGITAL_FEEDBACK',
    Refinement: 'REFINEMENT',
    ScheduleRefinement: 'SCHEDULE_REFINEMENT',
    DigitalDeliveryCreationRequest: 'DIGITAL_DELIVERY_CREATION_REQUEST',
    DigitalSuccessWorkflow: 'DIGITAL_SUCCESS_WORKFLOW',
    DigitalFailureWorkflow: 'DIGITAL_FAILURE_WORKFLOW',
    AnalogSuccessWorkflow: 'ANALOG_SUCCESS_WORKFLOW',
    AnalogFailureWorkflow: 'ANALOG_FAILURE_WORKFLOW',
    PrepareSimpleRegisteredLetter: 'PREPARE_SIMPLE_REGISTERED_LETTER',
    SendSimpleRegisteredLetter: 'SEND_SIMPLE_REGISTERED_LETTER',
    SendSimpleRegisteredLetterProgress: 'SEND_SIMPLE_REGISTERED_LETTER_PROGRESS',
    NotificationViewedCreationRequest: 'NOTIFICATION_VIEWED_CREATION_REQUEST',
    NotificationViewed: 'NOTIFICATION_VIEWED',
    PrepareAnalogDomicile: 'PREPARE_ANALOG_DOMICILE',
    SendAnalogDomicile: 'SEND_ANALOG_DOMICILE',
    SendAnalogProgress: 'SEND_ANALOG_PROGRESS',
    SendAnalogFeedback: 'SEND_ANALOG_FEEDBACK',
    Payment: 'PAYMENT',
    CompletelyUnreachable: 'COMPLETELY_UNREACHABLE',
    CompletelyUnreachableCreationRequest: 'COMPLETELY_UNREACHABLE_CREATION_REQUEST',
    RequestRefused: 'REQUEST_REFUSED',
    AarCreationRequest: 'AAR_CREATION_REQUEST',
    AarGeneration: 'AAR_GENERATION',
    NotHandled: 'NOT_HANDLED',
    ProbableSchedulingAnalogDate: 'PROBABLE_SCHEDULING_ANALOG_DATE',
    NotificationCancellationRequest: 'NOTIFICATION_CANCELLATION_REQUEST',
    NotificationCancelled: 'NOTIFICATION_CANCELLED',
    PrepareAnalogDomicileFailure: 'PREPARE_ANALOG_DOMICILE_FAILURE',
    NotificationRaddRetrieved: 'NOTIFICATION_RADD_RETRIEVED'
} as const;

export type TimelineElementCategoryV23 = typeof TimelineElementCategoryV23[keyof typeof TimelineElementCategoryV23];


/**
 * @type TimelineElementDetailsV23
 * The raw event payload that will be different based on the event.
 * @export
 */
export type TimelineElementDetailsV23 = AarCreationRequestDetails | AarGenerationDetails | AnalogFailureWorkflowDetails | AnalogSuccessWorkflowDetails | BaseAnalogDetails | BaseRegisteredLetterDetails | CompletelyUnreachableCreationRequestDetails | CompletelyUnreachableDetails | DigitalDeliveryCreationRequestDetails | DigitalFailureWorkflowDetails | DigitalSuccessWorkflowDetails | GetAddressInfoDetails | NormalizedAddressDetails | NotHandledDetails | NotificationCancellationRequestDetails | NotificationCancelledDetails | NotificationPaidDetailsV23 | NotificationRADDRetrievedDetails | NotificationRequestAcceptedDetails | NotificationViewedCreationRequestDetailsV23 | NotificationViewedDetailsV23 | PrepareAnalogDomicileFailureDetails | PrepareDigitalDetails | ProbableDateAnalogWorkflowDetails | PublicRegistryCallDetails | PublicRegistryResponseDetails | RefinementDetailsV23 | RequestRefusedDetailsV23 | ScheduleAnalogWorkflowDetailsV23 | ScheduleDigitalWorkflowDetailsV23 | ScheduleRefinementDetails | SendAnalogDetails | SendAnalogFeedbackDetails | SendAnalogProgressDetailsV23 | SendCourtesyMessageDetails | SendDigitalDetails | SendDigitalFeedbackDetails | SendDigitalProgressDetailsV23 | SenderAckCreationRequestDetails | SimpleRegisteredLetterDetails | SimpleRegisteredLetterProgressDetails;


/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Status of application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Status of application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async status(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.status(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthCheckApi.status']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Status of application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: any): AxiosPromise<StatusSchema> {
            return localVarFp.status(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @summary Get Status of application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public status(options?: RawAxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).status(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationSentApi - axios parameter creator
 * @export
 */
export const NotificationSentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Questa operazione permette di leggere tutti i dettagli di una notifica accettata.
         * @summary Mittente: lettura dettagli notifica versione 1
         * @param {string} iun Identificativo Univoco Notifica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSentNotificationV1: async (iun: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iun' is not null or undefined
            assertParamExists('retrieveSentNotificationV1', 'iun', iun)
            const localVarPath = `/bff/v1/notifications/sent/{iun}`
                .replace(`{${"iun"}}`, encodeURIComponent(String(iun)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationSentApi - functional programming interface
 * @export
 */
export const NotificationSentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationSentApiAxiosParamCreator(configuration)
    return {
        /**
         * Questa operazione permette di leggere tutti i dettagli di una notifica accettata.
         * @summary Mittente: lettura dettagli notifica versione 1
         * @param {string} iun Identificativo Univoco Notifica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSentNotificationV1(iun: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BffFullNotificationV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveSentNotificationV1(iun, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationSentApi.retrieveSentNotificationV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationSentApi - factory interface
 * @export
 */
export const NotificationSentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationSentApiFp(configuration)
    return {
        /**
         * Questa operazione permette di leggere tutti i dettagli di una notifica accettata.
         * @summary Mittente: lettura dettagli notifica versione 1
         * @param {string} iun Identificativo Univoco Notifica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSentNotificationV1(iun: string, options?: any): AxiosPromise<BffFullNotificationV1> {
            return localVarFp.retrieveSentNotificationV1(iun, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationSentApi - object-oriented interface
 * @export
 * @class NotificationSentApi
 * @extends {BaseAPI}
 */
export class NotificationSentApi extends BaseAPI {
    /**
     * Questa operazione permette di leggere tutti i dettagli di una notifica accettata.
     * @summary Mittente: lettura dettagli notifica versione 1
     * @param {string} iun Identificativo Univoco Notifica
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationSentApi
     */
    public retrieveSentNotificationV1(iun: string, options?: RawAxiosRequestConfig) {
        return NotificationSentApiFp(this.configuration).retrieveSentNotificationV1(iun, options).then((request) => request(this.axios, this.basePath));
    }
}



