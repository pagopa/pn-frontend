/* tslint:disable */
/* eslint-disable */
/**
 * PN BFF BE Microservice - TOS e Privacy
 * Documentation APIs v1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pn@pagopa.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BffConsent
 */
export interface BffConsent {
    /**
     * 
     * @type {string}
     * @memberof BffConsent
     */
    'recipientId': string;
    /**
     * 
     * @type {ConsentType}
     * @memberof BffConsent
     */
    'consentType': ConsentType;
    /**
     * 
     * @type {boolean}
     * @memberof BffConsent
     */
    'accepted'?: boolean;
    /**
     * version of consent
     * @type {string}
     * @memberof BffConsent
     */
    'consentVersion': string;
    /**
     * 
     * @type {boolean}
     * @memberof BffConsent
     */
    'isFirstAccept'?: boolean;
}


/**
 * 
 * @export
 * @interface BffTosPrivacyActionBody
 */
export interface BffTosPrivacyActionBody {
    /**
     * action on consent
     * @type {string}
     * @memberof BffTosPrivacyActionBody
     */
    'action': BffTosPrivacyActionBodyActionEnum;
    /**
     * version of consent
     * @type {string}
     * @memberof BffTosPrivacyActionBody
     */
    'version': string;
}

export const BffTosPrivacyActionBodyActionEnum = {
    Accept: 'ACCEPT',
    Decline: 'DECLINE'
} as const;

export type BffTosPrivacyActionBodyActionEnum = typeof BffTosPrivacyActionBodyActionEnum[keyof typeof BffTosPrivacyActionBodyActionEnum];

/**
 * 
 * @export
 * @interface BffTosPrivacyBody
 */
export interface BffTosPrivacyBody {
    /**
     * 
     * @type {BffTosPrivacyActionBody}
     * @memberof BffTosPrivacyBody
     */
    'tos'?: BffTosPrivacyActionBody;
    /**
     * 
     * @type {BffTosPrivacyActionBody}
     * @memberof BffTosPrivacyBody
     */
    'privacy'?: BffTosPrivacyActionBody;
}
/**
 * 
 * @export
 * @interface BffTosPrivacyConsent
 */
export interface BffTosPrivacyConsent {
    /**
     * 
     * @type {BffConsent}
     * @memberof BffTosPrivacyConsent
     */
    'tos': BffConsent;
    /**
     * 
     * @type {BffConsent}
     * @memberof BffTosPrivacyConsent
     */
    'privacy': BffConsent;
}
/**
 * 
 * @export
 * @interface Consent
 */
export interface Consent {
    /**
     * 
     * @type {string}
     * @memberof Consent
     */
    'recipientId': string;
    /**
     * 
     * @type {ConsentType}
     * @memberof Consent
     */
    'consentType': ConsentType;
    /**
     * 
     * @type {boolean}
     * @memberof Consent
     */
    'accepted'?: boolean;
    /**
     * version of consent
     * @type {string}
     * @memberof Consent
     */
    'consentVersion': string;
    /**
     * 
     * @type {boolean}
     * @memberof Consent
     */
    'isFirstAccept'?: boolean;
}


/**
 * 
 * @export
 * @interface ConsentAction
 */
export interface ConsentAction {
    /**
     * action on consent
     * @type {string}
     * @memberof ConsentAction
     */
    'action'?: ConsentActionActionEnum;
}

export const ConsentActionActionEnum = {
    Accept: 'ACCEPT',
    Decline: 'DECLINE'
} as const;

export type ConsentActionActionEnum = typeof ConsentActionActionEnum[keyof typeof ConsentActionActionEnum];

/**
 * type of consent
 * @export
 * @enum {string}
 */

export const ConsentType = {
    Tos: 'TOS',
    Dataprivacy: 'DATAPRIVACY'
} as const;

export type ConsentType = typeof ConsentType[keyof typeof ConsentType];


/**
 * 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * URI reference of type definition
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof Problem
     */
    'status': number;
    /**
     * A short, summary of the problem type. Written in english and readable
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * A human readable explanation of the problem.
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * Internal support identifier associated to error
     * @type {string}
     * @memberof Problem
     */
    'traceId'?: string;
    /**
     * date and time referred to UTC
     * @type {string}
     * @memberof Problem
     */
    'timestamp'?: string;
    /**
     * 
     * @type {Array<ProblemError>}
     * @memberof Problem
     */
    'errors': Array<ProblemError>;
}
/**
 * 
 * @export
 * @interface ProblemError
 */
export interface ProblemError {
    /**
     * Internal code of the error, in human-readable format
     * @type {string}
     * @memberof ProblemError
     */
    'code': string;
    /**
     * Parameter or request body field name for validation error
     * @type {string}
     * @memberof ProblemError
     */
    'element'?: string;
    /**
     * A human readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ProblemError
     */
    'detail'?: string;
}

/**
 * UserConsentsApi - axios parameter creator
 * @export
 */
export const UserConsentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Permette di accettare i TOS e la Privacy.
         * @summary Accettazione TOS e Privacy
         * @param {BffTosPrivacyBody} bffTosPrivacyBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptTosPrivacyV1: async (bffTosPrivacyBody: BffTosPrivacyBody, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bffTosPrivacyBody' is not null or undefined
            assertParamExists('acceptTosPrivacyV1', 'bffTosPrivacyBody', bffTosPrivacyBody)
            const localVarPath = `/bff/v1/tos-privacy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bffTosPrivacyBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ritorna lo stato di accettazione dei TOS e della Privacy.
         * @summary Accettazione TOS e Privacy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTosPrivacyV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bff/v1/tos-privacy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserConsentsApi - functional programming interface
 * @export
 */
export const UserConsentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserConsentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Permette di accettare i TOS e la Privacy.
         * @summary Accettazione TOS e Privacy
         * @param {BffTosPrivacyBody} bffTosPrivacyBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptTosPrivacyV1(bffTosPrivacyBody: BffTosPrivacyBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptTosPrivacyV1(bffTosPrivacyBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserConsentsApi.acceptTosPrivacyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ritorna lo stato di accettazione dei TOS e della Privacy.
         * @summary Accettazione TOS e Privacy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTosPrivacyV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BffTosPrivacyConsent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTosPrivacyV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserConsentsApi.getTosPrivacyV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserConsentsApi - factory interface
 * @export
 */
export const UserConsentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserConsentsApiFp(configuration)
    return {
        /**
         * Permette di accettare i TOS e la Privacy.
         * @summary Accettazione TOS e Privacy
         * @param {BffTosPrivacyBody} bffTosPrivacyBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptTosPrivacyV1(bffTosPrivacyBody: BffTosPrivacyBody, options?: any): AxiosPromise<void> {
            return localVarFp.acceptTosPrivacyV1(bffTosPrivacyBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Ritorna lo stato di accettazione dei TOS e della Privacy.
         * @summary Accettazione TOS e Privacy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTosPrivacyV1(options?: any): AxiosPromise<BffTosPrivacyConsent> {
            return localVarFp.getTosPrivacyV1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserConsentsApi - object-oriented interface
 * @export
 * @class UserConsentsApi
 * @extends {BaseAPI}
 */
export class UserConsentsApi extends BaseAPI {
    /**
     * Permette di accettare i TOS e la Privacy.
     * @summary Accettazione TOS e Privacy
     * @param {BffTosPrivacyBody} bffTosPrivacyBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserConsentsApi
     */
    public acceptTosPrivacyV1(bffTosPrivacyBody: BffTosPrivacyBody, options?: RawAxiosRequestConfig) {
        return UserConsentsApiFp(this.configuration).acceptTosPrivacyV1(bffTosPrivacyBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ritorna lo stato di accettazione dei TOS e della Privacy.
     * @summary Accettazione TOS e Privacy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserConsentsApi
     */
    public getTosPrivacyV1(options?: RawAxiosRequestConfig) {
        return UserConsentsApiFp(this.configuration).getTosPrivacyV1(options).then((request) => request(this.axios, this.basePath));
    }
}



