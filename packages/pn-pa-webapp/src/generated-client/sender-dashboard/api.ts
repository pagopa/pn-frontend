/* tslint:disable */
/* eslint-disable */
/**
 * PN BFF BE Microservice - Dashboard Mittenti
 * Documentation APIs v1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pn@pagopa.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BffSenderDashboardDataResponse
 */
export interface BffSenderDashboardDataResponse {
    /**
     * Unique identifier for the sender
     * @type {string}
     * @memberof BffSenderDashboardDataResponse
     */
    'senderId'?: string;
    /**
     * Index generation date and time referred to UTC
     * @type {string}
     * @memberof BffSenderDashboardDataResponse
     */
    'genTimestamp'?: string;
    /**
     * YYYY-MM-DD last date on DL files
     * @type {string}
     * @memberof BffSenderDashboardDataResponse
     */
    'lastDate'?: string;
    /**
     * YYYY-MM-DD start date
     * @type {string}
     * @memberof BffSenderDashboardDataResponse
     */
    'startDate'?: string;
    /**
     * YYYY-MM-DD end date (included)
     * @type {string}
     * @memberof BffSenderDashboardDataResponse
     */
    'endDate'?: string;
    /**
     * 
     * @type {Array<BffSenderDashboardNotificationOverview>}
     * @memberof BffSenderDashboardDataResponse
     */
    'notificationsOverview'?: Array<BffSenderDashboardNotificationOverview>;
    /**
     * 
     * @type {Array<BffSenderDashboardDigitalNotificationFocus>}
     * @memberof BffSenderDashboardDataResponse
     */
    'digitalNotificationFocus'?: Array<BffSenderDashboardDigitalNotificationFocus>;
}
/**
 * 
 * @export
 * @interface BffSenderDashboardDigitalNotificationFocus
 */
export interface BffSenderDashboardDigitalNotificationFocus {
    /**
     * ID Ente
     * @type {string}
     * @memberof BffSenderDashboardDigitalNotificationFocus
     */
    'sender_id'?: string;
    /**
     * YYYY-MM-DD invio delle notifiche
     * @type {string}
     * @memberof BffSenderDashboardDigitalNotificationFocus
     */
    'notification_send_date'?: string;
    /**
     * Tipo di errore:   - __\'ERRORE DOMINIO PEC NON VALIDO\'__   - __\'ERRORE CONSEGNA\'__   - __\'NON ACCETTAZIONE\'__   - __\'-\'__
     * @type {string}
     * @memberof BffSenderDashboardDigitalNotificationFocus
     */
    'error_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof BffSenderDashboardDigitalNotificationFocus
     */
    'failed_attempts_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof BffSenderDashboardDigitalNotificationFocus
     */
    'notifications_count'?: number;
}
/**
 * 
 * @export
 * @interface BffSenderDashboardNotificationOverview
 */
export interface BffSenderDashboardNotificationOverview {
    /**
     * ID Ente
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'sender_id'?: string;
    /**
     * YYYY-MM-DD invio delle notifiche
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notification_send_date'?: string;
    /**
     * Stato richiesta notifica:   - __\'ACCEPTED\'__   - __\'REFUSED\'__
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notification_request_status'?: string;
    /**
     * Ultimo stato della notifica:   - __\'REFUSED\'__   - __\'ACCEPETED\'__   - __\'CANCELLED\'__   - __\'DELIVERED\'__   - __\'DELIVERING\'__   - __\'EFFECTIVE_DATE\'__   - __\'UNREACHABLE\'__   - __\'VIEWED\'__
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notification_status'?: string;
    /**
     * Tipo di notifica:   - __\'DIGITAL\'__   - __\'ANALOGIC\'__   - __\'-\'__
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notification_type'?: string;
    /**
     * Esito invio notifica digitale:   - __\'OK\'__   - __\'KO\'__   - __\'IN CORSO\'__   - __\'-\'__
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'status_digital_delivery'?: string;
    /**
     * Notifica consegnata __\'SI\'__ o __\'NO\'__
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notification_delivered'?: string;
    /**
     * Notifica visionata __\'SI\'__ o __\'NO\'__
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notification_viewed'?: string;
    /**
     * Notifica perfezionata __\'SI\'__ o __\'NO\'__
     * @type {string}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notification_refined'?: string;
    /**
     * Numero di tentativi notifica digitale
     * @type {number}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'attempt_count_per_digital_notification'?: number;
    /**
     * Numero Notifiche
     * @type {number}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'notifications_count'?: number;
    /**
     * Tempo di consegna in ore
     * @type {number}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'delivery_time'?: number;
    /**
     * Tempo di visualizzazione in ore
     * @type {number}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'view_time'?: number;
    /**
     * Tempo di perfezionamento in ore
     * @type {number}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'refinement_time'?: number;
    /**
     * Tempo di validazione in ore
     * @type {number}
     * @memberof BffSenderDashboardNotificationOverview
     */
    'validation_time'?: number;
}
/**
 * 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * URI reference of type definition
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof Problem
     */
    'status': number;
    /**
     * A short, summary of the problem type. Written in english and readable
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * A human readable explanation of the problem.
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * Internal support identifier associated to error
     * @type {string}
     * @memberof Problem
     */
    'traceId'?: string;
    /**
     * date and time referred to UTC
     * @type {string}
     * @memberof Problem
     */
    'timestamp'?: string;
    /**
     * 
     * @type {Array<ProblemError>}
     * @memberof Problem
     */
    'errors': Array<ProblemError>;
}
/**
 * 
 * @export
 * @interface ProblemError
 */
export interface ProblemError {
    /**
     * Internal code of the error, in human-readable format
     * @type {string}
     * @memberof ProblemError
     */
    'code': string;
    /**
     * Parameter or request body field name for validation error
     * @type {string}
     * @memberof ProblemError
     */
    'element'?: string;
    /**
     * A human readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ProblemError
     */
    'detail'?: string;
}

/**
 * SenderDashboardApi - axios parameter creator
 * @export
 */
export const SenderDashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * servizio per il recupero dei dati per dashboard mittenti
         * @summary recupero dati per dashboard mittenti
         * @param {GetDashboardDataV1CxTypeEnum} cxType Customer/Receiver Type
         * @param {string} cxId Customer/Receiver Identifier
         * @param {string} [startDate] YYYY-MM-DD search start date
         * @param {string} [endDate] YYYY-MM-DD search end date (included)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardDataV1: async (cxType: GetDashboardDataV1CxTypeEnum, cxId: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cxType' is not null or undefined
            assertParamExists('getDashboardDataV1', 'cxType', cxType)
            // verify required parameter 'cxId' is not null or undefined
            assertParamExists('getDashboardDataV1', 'cxId', cxId)
            const localVarPath = `/bff/v1/sender-dashboard/dashboard-data-request/{cxType}/{cxId}`
                .replace(`{${"cxType"}}`, encodeURIComponent(String(cxType)))
                .replace(`{${"cxId"}}`, encodeURIComponent(String(cxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SenderDashboardApi - functional programming interface
 * @export
 */
export const SenderDashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SenderDashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * servizio per il recupero dei dati per dashboard mittenti
         * @summary recupero dati per dashboard mittenti
         * @param {GetDashboardDataV1CxTypeEnum} cxType Customer/Receiver Type
         * @param {string} cxId Customer/Receiver Identifier
         * @param {string} [startDate] YYYY-MM-DD search start date
         * @param {string} [endDate] YYYY-MM-DD search end date (included)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardDataV1(cxType: GetDashboardDataV1CxTypeEnum, cxId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BffSenderDashboardDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboardDataV1(cxType, cxId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SenderDashboardApi.getDashboardDataV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SenderDashboardApi - factory interface
 * @export
 */
export const SenderDashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SenderDashboardApiFp(configuration)
    return {
        /**
         * servizio per il recupero dei dati per dashboard mittenti
         * @summary recupero dati per dashboard mittenti
         * @param {GetDashboardDataV1CxTypeEnum} cxType Customer/Receiver Type
         * @param {string} cxId Customer/Receiver Identifier
         * @param {string} [startDate] YYYY-MM-DD search start date
         * @param {string} [endDate] YYYY-MM-DD search end date (included)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardDataV1(cxType: GetDashboardDataV1CxTypeEnum, cxId: string, startDate?: string, endDate?: string, options?: any): AxiosPromise<BffSenderDashboardDataResponse> {
            return localVarFp.getDashboardDataV1(cxType, cxId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SenderDashboardApi - object-oriented interface
 * @export
 * @class SenderDashboardApi
 * @extends {BaseAPI}
 */
export class SenderDashboardApi extends BaseAPI {
    /**
     * servizio per il recupero dei dati per dashboard mittenti
     * @summary recupero dati per dashboard mittenti
     * @param {GetDashboardDataV1CxTypeEnum} cxType Customer/Receiver Type
     * @param {string} cxId Customer/Receiver Identifier
     * @param {string} [startDate] YYYY-MM-DD search start date
     * @param {string} [endDate] YYYY-MM-DD search end date (included)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SenderDashboardApi
     */
    public getDashboardDataV1(cxType: GetDashboardDataV1CxTypeEnum, cxId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return SenderDashboardApiFp(this.configuration).getDashboardDataV1(cxType, cxId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetDashboardDataV1CxTypeEnum = {
    Pa: 'PA',
    Pf: 'PF',
    Pg: 'PG'
} as const;
export type GetDashboardDataV1CxTypeEnum = typeof GetDashboardDataV1CxTypeEnum[keyof typeof GetDashboardDataV1CxTypeEnum];


