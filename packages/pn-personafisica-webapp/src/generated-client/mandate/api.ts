/* tslint:disable */
/* eslint-disable */
/**
 * PN BFF BE Microservice - Deleghe
 * Documentation APIs v1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pn@pagopa.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AcceptRequestDto
 */
export interface AcceptRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AcceptRequestDto
     */
    'verificationCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AcceptRequestDto
     */
    'groups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BffAcceptRequest
 */
export interface BffAcceptRequest {
    /**
     * 
     * @type {string}
     * @memberof BffAcceptRequest
     */
    'verificationCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BffAcceptRequest
     */
    'groups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BffMandate
 */
export interface BffMandate {
    /**
     * Available always, not required on mandate creation.
     * @type {string}
     * @memberof BffMandate
     */
    'mandateId'?: string | null;
    /**
     * 
     * @type {UserDto}
     * @memberof BffMandate
     */
    'delegator'?: UserDto | null;
    /**
     * 
     * @type {UserDto}
     * @memberof BffMandate
     */
    'delegate'?: UserDto | null;
    /**
     * Available always, not required on mandate creation.
     * @type {string}
     * @memberof BffMandate
     */
    'status'?: BffMandateStatusEnum | null;
    /**
     * Available always, not required on mandate creation.
     * @type {Array<OrganizationIdDto>}
     * @memberof BffMandate
     */
    'visibilityIds'?: Array<OrganizationIdDto> | null;
    /**
     * Available only for request where requesting user is the delegator
     * @type {string}
     * @memberof BffMandate
     */
    'verificationCode'?: string | null;
    /**
     * ISO 8601 format
     * @type {string}
     * @memberof BffMandate
     */
    'datefrom'?: string;
    /**
     * ISO 8601 format
     * @type {string}
     * @memberof BffMandate
     */
    'dateto'?: string;
    /**
     * 
     * @type {Array<GroupDto>}
     * @memberof BffMandate
     */
    'groups'?: Array<GroupDto>;
}

export const BffMandateStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Revoked: 'revoked',
    Rejected: 'rejected',
    Expired: 'expired'
} as const;

export type BffMandateStatusEnum = typeof BffMandateStatusEnum[keyof typeof BffMandateStatusEnum];

/**
 * 
 * @export
 * @interface BffMandatesCount
 */
export interface BffMandatesCount {
    /**
     * 
     * @type {number}
     * @memberof BffMandatesCount
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface BffNewMandateRequest
 */
export interface BffNewMandateRequest {
    /**
     * 
     * @type {UserDto}
     * @memberof BffNewMandateRequest
     */
    'delegate': UserDto | null;
    /**
     * Available always, not required on mandate creation.
     * @type {Array<OrganizationIdDto>}
     * @memberof BffNewMandateRequest
     */
    'visibilityIds'?: Array<OrganizationIdDto> | null;
    /**
     * Available only for request where requesting user is the delegator
     * @type {string}
     * @memberof BffNewMandateRequest
     */
    'verificationCode': string | null;
    /**
     * ISO 8601 format
     * @type {string}
     * @memberof BffNewMandateRequest
     */
    'dateto': string;
    /**
     * 
     * @type {Array<GroupDto>}
     * @memberof BffNewMandateRequest
     */
    'groups'?: Array<GroupDto>;
}
/**
 * 
 * @export
 * @interface BffSearchMandateRequest
 */
export interface BffSearchMandateRequest {
    /**
     * 
     * @type {string}
     * @memberof BffSearchMandateRequest
     */
    'taxId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BffSearchMandateRequest
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BffSearchMandateRequest
     */
    'status'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BffSearchMandateResponse
 */
export interface BffSearchMandateResponse {
    /**
     * 
     * @type {Array<MandateDto>}
     * @memberof BffSearchMandateResponse
     */
    'resultsPage'?: Array<MandateDto>;
    /**
     * Indica se sono presenti ulteriori pagine di risultati
     * @type {boolean}
     * @memberof BffSearchMandateResponse
     */
    'moreResult'?: boolean;
    /**
     * Elenco, non esaustivo, delle chiavi da usare per richiedere le  pagine di risultati successive a quella corrente. <br/> Valorizzato solo se il campo __moreResult__ ha valore __true__.
     * @type {Array<string>}
     * @memberof BffSearchMandateResponse
     */
    'nextPagesKey'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BffUpdateRequest
 */
export interface BffUpdateRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof BffUpdateRequest
     */
    'groups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GroupDto
 */
export interface GroupDto {
    /**
     * 
     * @type {string}
     * @memberof GroupDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupDto
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MandateCountsDto
 */
export interface MandateCountsDto {
    /**
     * 
     * @type {number}
     * @memberof MandateCountsDto
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface MandateDto
 */
export interface MandateDto {
    /**
     * Available always, not required on mandate creation.
     * @type {string}
     * @memberof MandateDto
     */
    'mandateId'?: string | null;
    /**
     * 
     * @type {UserDto}
     * @memberof MandateDto
     */
    'delegator'?: UserDto | null;
    /**
     * 
     * @type {UserDto}
     * @memberof MandateDto
     */
    'delegate'?: UserDto | null;
    /**
     * Available always, not required on mandate creation.
     * @type {string}
     * @memberof MandateDto
     */
    'status'?: MandateDtoStatusEnum | null;
    /**
     * Available always, not required on mandate creation.
     * @type {Array<OrganizationIdDto>}
     * @memberof MandateDto
     */
    'visibilityIds'?: Array<OrganizationIdDto> | null;
    /**
     * Available only for request where requesting user is the delegator
     * @type {string}
     * @memberof MandateDto
     */
    'verificationCode'?: string | null;
    /**
     * ISO 8601 format
     * @type {string}
     * @memberof MandateDto
     */
    'datefrom'?: string;
    /**
     * ISO 8601 format
     * @type {string}
     * @memberof MandateDto
     */
    'dateto'?: string;
    /**
     * 
     * @type {Array<GroupDto>}
     * @memberof MandateDto
     */
    'groups'?: Array<GroupDto>;
}

export const MandateDtoStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Revoked: 'revoked',
    Rejected: 'rejected',
    Expired: 'expired'
} as const;

export type MandateDtoStatusEnum = typeof MandateDtoStatusEnum[keyof typeof MandateDtoStatusEnum];

/**
 * Available always, not required on mandate creation.
 * @export
 * @interface OrganizationIdDto
 */
export interface OrganizationIdDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationIdDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationIdDto
     */
    'uniqueIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * URI reference of type definition
     * @type {string}
     * @memberof Problem
     */
    'type'?: string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     * @type {number}
     * @memberof Problem
     */
    'status': number;
    /**
     * A short, summary of the problem type. Written in english and readable
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * A human readable explanation of the problem.
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * Internal support identifier associated to error
     * @type {string}
     * @memberof Problem
     */
    'traceId'?: string;
    /**
     * date and time referred to UTC
     * @type {string}
     * @memberof Problem
     */
    'timestamp'?: string;
    /**
     * 
     * @type {Array<ProblemError>}
     * @memberof Problem
     */
    'errors': Array<ProblemError>;
}
/**
 * 
 * @export
 * @interface ProblemError
 */
export interface ProblemError {
    /**
     * Internal code of the error, in human-readable format
     * @type {string}
     * @memberof ProblemError
     */
    'code': string;
    /**
     * Parameter or request body field name for validation error
     * @type {string}
     * @memberof ProblemError
     */
    'element'?: string;
    /**
     * A human readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ProblemError
     */
    'detail'?: string;
}
/**
 * 
 * @export
 * @interface SearchMandateRequestDto
 */
export interface SearchMandateRequestDto {
    /**
     * 
     * @type {string}
     * @memberof SearchMandateRequestDto
     */
    'taxId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchMandateRequestDto
     */
    'groups'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchMandateRequestDto
     */
    'status'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchMandateResponseDto
 */
export interface SearchMandateResponseDto {
    /**
     * 
     * @type {Array<MandateDto>}
     * @memberof SearchMandateResponseDto
     */
    'resultsPage'?: Array<MandateDto>;
    /**
     * Indica se sono presenti ulteriori pagine di risultati
     * @type {boolean}
     * @memberof SearchMandateResponseDto
     */
    'moreResult'?: boolean;
    /**
     * Elenco, non esaustivo, delle chiavi da usare per richiedere le  pagine di risultati successive a quella corrente. <br/> Valorizzato solo se il campo __moreResult__ ha valore __true__.
     * @type {Array<string>}
     * @memberof SearchMandateResponseDto
     */
    'nextPagesKey'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateRequestDto
 */
export interface UpdateRequestDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateRequestDto
     */
    'groups'?: Array<string>;
}
/**
 * Available only for request where requesting user is the delegator
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'fiscalCode'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'person'?: boolean;
}

/**
 * MandateApi - axios parameter creator
 * @export
 */
export const MandateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept a mandate
         * @param {string} mandateId 
         * @param {BffAcceptRequest} bffAcceptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptMandateV1: async (mandateId: string, bffAcceptRequest: BffAcceptRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mandateId' is not null or undefined
            assertParamExists('acceptMandateV1', 'mandateId', mandateId)
            // verify required parameter 'bffAcceptRequest' is not null or undefined
            assertParamExists('acceptMandateV1', 'bffAcceptRequest', bffAcceptRequest)
            const localVarPath = `/bff/v1/mandate/{mandateId}/accept`
                .replace(`{${"mandateId"}}`, encodeURIComponent(String(mandateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bffAcceptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ritorna il numero totale di deleghe in base al filtro stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
         * @param {CountMandatesByDelegateV1StatusEnum} [status] Stato della delega
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countMandatesByDelegateV1: async (status?: CountMandatesByDelegateV1StatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bff/v1/mandate/delegate/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new mandate, returns the just created mandate if successful
         * @param {BffNewMandateRequest} bffNewMandateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMandateV1: async (bffNewMandateRequest: BffNewMandateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bffNewMandateRequest' is not null or undefined
            assertParamExists('createMandateV1', 'bffNewMandateRequest', bffNewMandateRequest)
            const localVarPath = `/bff/v1/mandate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bffNewMandateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ritorna la lista delle deleghe a carico in base al filtro per stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
         * @param {GetMandatesByDelegateV1StatusEnum} [status] Stato della delega
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMandatesByDelegateV1: async (status?: GetMandatesByDelegateV1StatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bff/v1/mandate/delegate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ritorna tutte le deleghe create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMandatesByDelegatorV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bff/v1/mandate/delegator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reject a mandate
         * @param {string} mandateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectMandateV1: async (mandateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mandateId' is not null or undefined
            assertParamExists('rejectMandateV1', 'mandateId', mandateId)
            const localVarPath = `/bff/v1/mandate/{mandateId}/reject`
                .replace(`{${"mandateId"}}`, encodeURIComponent(String(mandateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revoke a mandate
         * @param {string} mandateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMandateV1: async (mandateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mandateId' is not null or undefined
            assertParamExists('revokeMandateV1', 'mandateId', mandateId)
            const localVarPath = `/bff/v1/mandate/{mandateId}/revoke`
                .replace(`{${"mandateId"}}`, encodeURIComponent(String(mandateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ritorna la lista delle deleghe a carico in base ai filtri per stato, gruppo/i e delegante (taxId)
         * @param {number} size 
         * @param {BffSearchMandateRequest} bffSearchMandateRequest 
         * @param {string} [nextPageKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMandatesByDelegateV1: async (size: number, bffSearchMandateRequest: BffSearchMandateRequest, nextPageKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'size' is not null or undefined
            assertParamExists('searchMandatesByDelegateV1', 'size', size)
            // verify required parameter 'bffSearchMandateRequest' is not null or undefined
            assertParamExists('searchMandatesByDelegateV1', 'bffSearchMandateRequest', bffSearchMandateRequest)
            const localVarPath = `/bff/v1/mandate/delegate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (nextPageKey !== undefined) {
                localVarQueryParameter['nextPageKey'] = nextPageKey;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bffSearchMandateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a mandate
         * @param {string} mandateId 
         * @param {BffUpdateRequest} bffUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMandateV1: async (mandateId: string, bffUpdateRequest: BffUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mandateId' is not null or undefined
            assertParamExists('updateMandateV1', 'mandateId', mandateId)
            // verify required parameter 'bffUpdateRequest' is not null or undefined
            assertParamExists('updateMandateV1', 'bffUpdateRequest', bffUpdateRequest)
            const localVarPath = `/bff/v1/mandate/{mandateId}/update`
                .replace(`{${"mandateId"}}`, encodeURIComponent(String(mandateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bffUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MandateApi - functional programming interface
 * @export
 */
export const MandateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MandateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accept a mandate
         * @param {string} mandateId 
         * @param {BffAcceptRequest} bffAcceptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptMandateV1(mandateId: string, bffAcceptRequest: BffAcceptRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptMandateV1(mandateId, bffAcceptRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.acceptMandateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ritorna il numero totale di deleghe in base al filtro stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
         * @param {CountMandatesByDelegateV1StatusEnum} [status] Stato della delega
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countMandatesByDelegateV1(status?: CountMandatesByDelegateV1StatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BffMandatesCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countMandatesByDelegateV1(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.countMandatesByDelegateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new mandate, returns the just created mandate if successful
         * @param {BffNewMandateRequest} bffNewMandateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMandateV1(bffNewMandateRequest: BffNewMandateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMandateV1(bffNewMandateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.createMandateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ritorna la lista delle deleghe a carico in base al filtro per stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
         * @param {GetMandatesByDelegateV1StatusEnum} [status] Stato della delega
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMandatesByDelegateV1(status?: GetMandatesByDelegateV1StatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BffMandate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMandatesByDelegateV1(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.getMandatesByDelegateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ritorna tutte le deleghe create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMandatesByDelegatorV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BffMandate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMandatesByDelegatorV1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.getMandatesByDelegatorV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reject a mandate
         * @param {string} mandateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectMandateV1(mandateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectMandateV1(mandateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.rejectMandateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Revoke a mandate
         * @param {string} mandateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeMandateV1(mandateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeMandateV1(mandateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.revokeMandateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ritorna la lista delle deleghe a carico in base ai filtri per stato, gruppo/i e delegante (taxId)
         * @param {number} size 
         * @param {BffSearchMandateRequest} bffSearchMandateRequest 
         * @param {string} [nextPageKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMandatesByDelegateV1(size: number, bffSearchMandateRequest: BffSearchMandateRequest, nextPageKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BffSearchMandateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMandatesByDelegateV1(size, bffSearchMandateRequest, nextPageKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.searchMandatesByDelegateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a mandate
         * @param {string} mandateId 
         * @param {BffUpdateRequest} bffUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMandateV1(mandateId: string, bffUpdateRequest: BffUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMandateV1(mandateId, bffUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MandateApi.updateMandateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MandateApi - factory interface
 * @export
 */
export const MandateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MandateApiFp(configuration)
    return {
        /**
         * 
         * @summary Accept a mandate
         * @param {string} mandateId 
         * @param {BffAcceptRequest} bffAcceptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptMandateV1(mandateId: string, bffAcceptRequest: BffAcceptRequest, options?: any): AxiosPromise<void> {
            return localVarFp.acceptMandateV1(mandateId, bffAcceptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ritorna il numero totale di deleghe in base al filtro stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
         * @param {CountMandatesByDelegateV1StatusEnum} [status] Stato della delega
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countMandatesByDelegateV1(status?: CountMandatesByDelegateV1StatusEnum, options?: any): AxiosPromise<BffMandatesCount> {
            return localVarFp.countMandatesByDelegateV1(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new mandate, returns the just created mandate if successful
         * @param {BffNewMandateRequest} bffNewMandateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMandateV1(bffNewMandateRequest: BffNewMandateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createMandateV1(bffNewMandateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ritorna la lista delle deleghe a carico in base al filtro per stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
         * @param {GetMandatesByDelegateV1StatusEnum} [status] Stato della delega
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMandatesByDelegateV1(status?: GetMandatesByDelegateV1StatusEnum, options?: any): AxiosPromise<Array<BffMandate>> {
            return localVarFp.getMandatesByDelegateV1(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ritorna tutte le deleghe create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMandatesByDelegatorV1(options?: any): AxiosPromise<Array<BffMandate>> {
            return localVarFp.getMandatesByDelegatorV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reject a mandate
         * @param {string} mandateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectMandateV1(mandateId: string, options?: any): AxiosPromise<void> {
            return localVarFp.rejectMandateV1(mandateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revoke a mandate
         * @param {string} mandateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeMandateV1(mandateId: string, options?: any): AxiosPromise<void> {
            return localVarFp.revokeMandateV1(mandateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ritorna la lista delle deleghe a carico in base ai filtri per stato, gruppo/i e delegante (taxId)
         * @param {number} size 
         * @param {BffSearchMandateRequest} bffSearchMandateRequest 
         * @param {string} [nextPageKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMandatesByDelegateV1(size: number, bffSearchMandateRequest: BffSearchMandateRequest, nextPageKey?: string, options?: any): AxiosPromise<BffSearchMandateResponse> {
            return localVarFp.searchMandatesByDelegateV1(size, bffSearchMandateRequest, nextPageKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a mandate
         * @param {string} mandateId 
         * @param {BffUpdateRequest} bffUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMandateV1(mandateId: string, bffUpdateRequest: BffUpdateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateMandateV1(mandateId, bffUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MandateApi - object-oriented interface
 * @export
 * @class MandateApi
 * @extends {BaseAPI}
 */
export class MandateApi extends BaseAPI {
    /**
     * 
     * @summary Accept a mandate
     * @param {string} mandateId 
     * @param {BffAcceptRequest} bffAcceptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public acceptMandateV1(mandateId: string, bffAcceptRequest: BffAcceptRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).acceptMandateV1(mandateId, bffAcceptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ritorna il numero totale di deleghe in base al filtro stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
     * @param {CountMandatesByDelegateV1StatusEnum} [status] Stato della delega
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public countMandatesByDelegateV1(status?: CountMandatesByDelegateV1StatusEnum, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).countMandatesByDelegateV1(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new mandate, returns the just created mandate if successful
     * @param {BffNewMandateRequest} bffNewMandateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public createMandateV1(bffNewMandateRequest: BffNewMandateRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).createMandateV1(bffNewMandateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ritorna la lista delle deleghe a carico in base al filtro per stato (se specificato). Se non è presente nessun filtro, sono ritornate tutte le deleghe attive e pending
     * @param {GetMandatesByDelegateV1StatusEnum} [status] Stato della delega
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public getMandatesByDelegateV1(status?: GetMandatesByDelegateV1StatusEnum, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).getMandatesByDelegateV1(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ritorna tutte le deleghe create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public getMandatesByDelegatorV1(options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).getMandatesByDelegatorV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reject a mandate
     * @param {string} mandateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public rejectMandateV1(mandateId: string, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).rejectMandateV1(mandateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revoke a mandate
     * @param {string} mandateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public revokeMandateV1(mandateId: string, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).revokeMandateV1(mandateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ritorna la lista delle deleghe a carico in base ai filtri per stato, gruppo/i e delegante (taxId)
     * @param {number} size 
     * @param {BffSearchMandateRequest} bffSearchMandateRequest 
     * @param {string} [nextPageKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public searchMandatesByDelegateV1(size: number, bffSearchMandateRequest: BffSearchMandateRequest, nextPageKey?: string, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).searchMandatesByDelegateV1(size, bffSearchMandateRequest, nextPageKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a mandate
     * @param {string} mandateId 
     * @param {BffUpdateRequest} bffUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MandateApi
     */
    public updateMandateV1(mandateId: string, bffUpdateRequest: BffUpdateRequest, options?: RawAxiosRequestConfig) {
        return MandateApiFp(this.configuration).updateMandateV1(mandateId, bffUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CountMandatesByDelegateV1StatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Revoked: 'revoked',
    Rejected: 'rejected',
    Expired: 'expired'
} as const;
export type CountMandatesByDelegateV1StatusEnum = typeof CountMandatesByDelegateV1StatusEnum[keyof typeof CountMandatesByDelegateV1StatusEnum];
/**
 * @export
 */
export const GetMandatesByDelegateV1StatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Revoked: 'revoked',
    Rejected: 'rejected',
    Expired: 'expired'
} as const;
export type GetMandatesByDelegateV1StatusEnum = typeof GetMandatesByDelegateV1StatusEnum[keyof typeof GetMandatesByDelegateV1StatusEnum];


